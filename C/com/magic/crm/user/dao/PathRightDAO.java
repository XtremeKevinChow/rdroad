package com.magic.crm.user.dao;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.*;
import java.math.*;


/**
 * Jdbc Bean Class<br>
 * <br>
 * Autogenerated on 03/17/2003 10:36:03<br>
 * &nbsp;&nbsp;&nbsp; table = "pathright"
*
* @author Generator
*/
public class PathRightDAO implements java.io.Serializable {


   public com.magic.crm.user.entity.PathRight findByPrimaryKey(Connection con,com.magic.crm.user.entity.PathRight info) throws SQLException {
       PreparedStatement pstmt = null;
       ResultSet rs = null;


       try {
          String sQuery = "SELECT path, rightId FROM crm_pathright  ";
          pstmt = con.prepareStatement(sQuery);


          rs = pstmt.executeQuery();

          if (rs.next()) {
              info.setPath(rs.getString("path"));
              info.setRightId(rs.getBigDecimal("rightId"));
          } else {
             return null;
          }
       } catch (SQLException e) {
         throw e;
       } finally {
          if (rs != null)
             try { rs.close(); } catch (Exception e) {}
          if (pstmt != null)
             try { pstmt.close(); } catch (Exception e) {}
       }
       return info;
   }


   public Map getPathRightMap(Connection con) throws SQLException {
       PreparedStatement pstmt = null;
       ResultSet rs = null;

			 Map pathRightMap = new HashMap();

       try {
          String sQuery = "SELECT path, rightId FROM crm_pathright ";
          pstmt = con.prepareStatement(sQuery);
       
          rs = pstmt.executeQuery();
          while (rs.next()) {

          		String path = rs.getString("path").trim();
          		//System.out.println("path is "+path);
          		BigDecimal right = rs.getBigDecimal("rightId");

              pathRightMap.put(path, right);
          }
       } catch (SQLException e) {
       	System.out.println("jackey find wrong in PathRightDAO.class!");
       	e.printStackTrace();
         //throw e;
       } finally {
          if (rs != null)
             try { rs.close(); } catch (Exception e) {}
          if (pstmt != null)
             try { pstmt.close(); } catch (Exception e) {}
       }
       return pathRightMap;
   }

   public void insert(Connection con, com.magic.crm.user.entity.PathRight info) throws SQLException {
      PreparedStatement pstmt = null;

      try {
         String sQuery = "INSERT INTO crm_pathright(path, rightId) VALUES(?, ?)";
         pstmt = con.prepareStatement(sQuery);

         pstmt.setString(1, info.getPath());
         pstmt.setBigDecimal(2, info.getRightId());

         pstmt.execute();

       } catch (SQLException e) {
          throw e;
       } finally {
          if (pstmt != null)
             try { pstmt.close(); } catch (Exception e) {}
       }
   }

   public void update(Connection con, com.magic.crm.user.entity.PathRight info) throws SQLException {
      PreparedStatement pstmt = null;

      try {
         String sQuery = "UPDATE crm_pathright SET path=?, rightId=? WHERE ";
         pstmt = con.prepareStatement(sQuery);

         pstmt.setString(1, info.getPath());
         pstmt.setBigDecimal(2, info.getRightId());

         pstmt.execute();

       } catch (SQLException e) {
          throw e;
       } finally {
          if (pstmt != null)
             try { pstmt.close(); } catch (Exception e) {}
       }
   }
   public void pathInsert(Connection con, String path,String rightname,
           int parentid,int rootid) throws SQLException {
    PreparedStatement pstmt = null;
    int pathid = 0;
    ResultSet rs=null;
	try {

        String pathSql = "select seq_crm_rights_RIGHTID.nextval  from dual";
        pstmt = con.prepareStatement(pathSql);
        rs = pstmt.executeQuery();
        if(rs.next()) {
        	pathid = rs.getInt(1);
        } 
	} catch (SQLException e) {
		e.printStackTrace();
	} finally {
		if (rs != null)
			try {
				rs.close();
			} catch (Exception e) {
			}
		if (pstmt != null)
			try {
				pstmt.close();
			} catch (Exception e) {
			}
	}    
    try {  
        con.setAutoCommit(false);
        //System.out.println(pathid+","+rightname+","+parentid);
        String sQuery2 = "INSERT INTO crm_rights( RIGHTID,RIGHTNAME,PARENTID,rootid) VALUES(?, ?,?,?)";
		pstmt = con.prepareStatement(sQuery2);
		pstmt.setInt(1,pathid);					        
		pstmt.setString(2,rightname);
		pstmt.setInt(3,parentid);     
		pstmt.setInt(4,rootid); 
		pstmt.execute();        
        String sQuery = "INSERT INTO crm_pathright( RIGHTID,path) VALUES(?, ?)";
		pstmt = con.prepareStatement(sQuery);		
		pstmt.setInt(1,pathid);					        
		pstmt.setString(2,path);
		pstmt.execute();

       con.commit();
    } catch (SQLException e) {
		        e.printStackTrace();		
		        try{	
		            con.rollback();		
		         }catch(Exception ex){		
		         	e.printStackTrace();
		        }
     } finally {
        if (rs != null)
            try { rs.close(); } catch (Exception e) {}
        if (pstmt != null)
           try { pstmt.close(); } catch (Exception e) {}
     }
 }

   public void delete(Connection con, com.magic.crm.user.entity.PathRight info) throws SQLException {
      PreparedStatement pstmt = null;

      try {
         String sQuery = "DELETE crm_pathright WHERE ";
         pstmt = con.prepareStatement(sQuery);


         pstmt.execute();

       } catch (SQLException e) {
          throw e;
       } finally {
          if (pstmt != null)
             try { pstmt.close(); } catch (Exception e) {}
       }
   }


}
