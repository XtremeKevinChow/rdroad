package com.magic.crm.product.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.CallableStatement;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.apache.log4j.Logger;
//**********
import com.magic.crm.product.entity.Product;
import com.magic.crm.product.form.ProductForm;
import com.magic.crm.product.form.ProductSKUForm;
import com.magic.crm.product.form.ProductSetItemForm;
import com.magic.crm.common.CommonPageUtil;
import com.magic.crm.util.DateUtil;
import com.magic.crm.exception.JException;

/**
 * Jdbc Bean Class <br>
 * <br>
 * Autogenerated on 01/28/2005 06:41:59 <br>
 * &nbsp;&nbsp;&nbsp; table = "prd_items"
 * 
 * @author Generator
 */
public class ProductDAO implements java.io.Serializable {

	private static Logger log = Logger.getLogger("ProductDAO.class");
	
	/**
	 * 批量改变产品的分类
	 * @param conn
	 * @param oldType
	 * @param newType
	 * @throws SQLException
	 */
	public void changeNewType (Connection conn, int oldType, int newType) throws SQLException {
		PreparedStatement pstmt = null;
		String sql = "update magic.prd_items set category_id = ? where category_id in(select catalog_id from PRD_ITEM_CATEGORY start with catalog_id = ? connect by parent_id = prior catalog_id)";
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, newType);
			pstmt.setInt(2, oldType);
			pstmt.execute();
		} catch (SQLException e) {
			throw e;
		} finally {
			if (pstmt != null)
				try {
					pstmt.close();
				} catch (Exception e) {
				}
		}
	}
	public CommonPageUtil query(Connection con, CommonPageUtil pageModel)
			throws Exception {

		PreparedStatement pstmt = null;

		ResultSet rs = null;

		ArrayList list = new ArrayList();
		try {
			String product_id = (String) pageModel.getCondition().get(
					"productCode");
			String product_name = (String) pageModel.getCondition().get(
					"productName");
			String product_type = (String) pageModel.getCondition().get(
					"productType");
			String categoryID = (String) pageModel.getCondition().get(
					"categoryID");

			String sql = null;
			sql = "select count(*) from prd_item t1 left join prd_item_category t2 " +
					"on t1.category_id=t2.catalog_id where t1.itm_type>0 ";
			
			String sqlCondition = "";
			if (product_type != null && !(product_type.equals(""))) {
				sqlCondition = sqlCondition + " and t1.itm_type = "
						+ product_type;
			}
			if (product_id != null && !(product_id.equals(""))) {
				sqlCondition = sqlCondition + " and t1.itm_code = '"
						+ product_id + "'";
			}
			if (product_name != null && !(product_name.equals(""))) {
				sqlCondition = sqlCondition + " and t1.itm_name like '%"
						+ product_name + "%'";
			}
			
			if (categoryID != null && !(categoryID.equals("0"))) {
				sqlCondition = sqlCondition
						+ " and category_id in (select catalog_id from PRD_ITEM_CATEGORY start with catalog_id = "
						+ Integer.parseInt(categoryID)
						+ " connect by parent_id = prior catalog_id)";
			}
			
			sql = sql + sqlCondition;
			log.debug(sql);
			
			pstmt = con.prepareStatement(sql);

			rs = pstmt.executeQuery();
			int recordCount = 0;
			if (rs.next()) {
				recordCount = rs.getInt(1);
			}

			pageModel.setRecordCount(recordCount);
			rs.close();
			pstmt.close();
			
			
			String sQuery = "";
			sQuery = "select t1.itm_code,t1.itm_name,itm_fabric,itm_lining, t2.catalog_name,t1.itm_type," +
					"decode(itm_type,1,'普通商品',2,'系列商品',3,'套装商品',0,'辅料',itm_type) itm_type_name," +
					"t2.catalog_name ," +
					"STANDARD_PRICE,itm_cost,SALE_PRICE,VIP_PRICE,max_count " + 
					" from prd_item t1 " +
					"left join prd_item_category t2 on t1.category_id=t2.catalog_id where t1.itm_type >0 ";
			sQuery = sQuery + sqlCondition;
			
			log.debug(sQuery);
			pstmt = con.prepareStatement(sQuery);
			rs = pstmt.executeQuery();
			int recNo = 0;

			while (rs.next()) {
				if (recNo >= pageModel.getFrom() && recNo <= pageModel.getTo()) {
					ProductSKUForm info = new ProductSKUForm();
					//info.setItemID(rs.getString("item_id"));
					info.setItem_code(rs.getString("itm_code"));
					info.setItem_name(rs.getString("itm_name"));
					
					info.setItem_type(rs.getInt("itm_type"));
					info.setItem_type_name(rs.getString("itm_type_name"));
					info.setItem_category_name(rs.getString("catalog_name"));
					info.setStandard_price(rs.getDouble("standard_price"));
					info.setItem_cost(rs.getDouble("itm_cost"));
					info.setSale_price(rs.getDouble("sale_price"));
					info.setVip_price(rs.getDouble("vip_price"));
					info.setMax_count(rs.getInt("max_count"));
					
					list.add(info);
				} else if (recNo > pageModel.getTo()) {
					break;
				}
				recNo++;
			}
			rs.close();
			//pageModel.setRecordCount
			pageModel.setModelList(list);
		} catch (SQLException e) {
			log.debug(e);
			throw e;
		} finally {
			try {
					pstmt.close();
				} catch (Exception e) {
				}
		}
		return pageModel;
	}

	public CommonPageUtil advancequery(Connection con, CommonPageUtil pageModel)
			throws Exception {

		PreparedStatement pstmt = null;

		ResultSet rs = null;

		ArrayList list = new ArrayList();
		try {
			
			String product_type = (String) pageModel.getCondition().get("productType");
			String isSet = (String) pageModel.getCondition().get("isSet");
			String categoryID = (String) pageModel.getCondition().get("categoryID");
			String qty = (String) pageModel.getCondition().get("qty");
			String standardPrice1 = (String)pageModel.getCondition().get("standardPrice1");
			String standardPrice2 = (String)pageModel.getCondition().get("standardPrice2");
			String webPrice1 = (String)pageModel.getCondition().get("webPrice1");
			String webPrice2 = (String)pageModel.getCondition().get("webPrice2");
			String silverPrice1 = (String)pageModel.getCondition().get("silverPrice1");
			String silverPrice2 = (String)pageModel.getCondition().get("silverPrice2");
			String godenPrice1 = (String)pageModel.getCondition().get("godenPrice1");
			String godenPrice2 = (String)pageModel.getCondition().get("godenPrice2");
			String platina_Price1 = (String)pageModel.getCondition().get("platina_Price1");
			String platina_Price2 = (String)pageModel.getCondition().get("platina_Price2");			
			String discount1 = (String)pageModel.getCondition().get("discount1");
			String discount2 = (String)pageModel.getCondition().get("discount2");
			String supplierID = (String)pageModel.getCondition().get("supplierID");
			String publishingHouse = (String)pageModel.getCondition().get("publishingHouse");
			String ifPresell = (String)pageModel.getCondition().get("ifPresell");
			String clubID = (String)pageModel.getCondition().get("clubID");
			String ageSegment = (String)pageModel.getCondition().get("ageSegment");
			
			String sql = null;
			String sqlCondition = "";
			sql = "select count(*) from prd_items pi,prd_pricelist_lines pl where pi.item_id= pl.item_id and pl.PRICELIST_ID = 0 ";
			if (product_type != null && !(product_type.equals("0"))) {
				sqlCondition = sqlCondition + " and pi.item_type = "
						+ product_type;
			}
			
			if (isSet != null && !isSet.equals(""))
				sqlCondition = sqlCondition + " and pi.is_set =" +Integer.parseInt(isSet) ;
			
			if(standardPrice1 != null && !standardPrice1.equals("") )
				sqlCondition = sqlCondition + " and pi.standard_Price >= " + Double.parseDouble(standardPrice1);
			if(standardPrice2 != null && !standardPrice2.equals("") )
				sqlCondition = sqlCondition + " and pi.standard_Price <= " + Double.parseDouble(standardPrice2);
			if(webPrice1 != null && !webPrice1.equals("") )
				sqlCondition = sqlCondition + " and pl.web_Price >= " + Double.parseDouble(webPrice1);
			if(webPrice2 != null && !webPrice2.equals("") )
				sqlCondition = sqlCondition + " and pl.web_Price <= " + Double.parseDouble(webPrice2);
			if(silverPrice1 != null && !silverPrice1.equals("") )
				sqlCondition = sqlCondition + " and pl.common_Price >= " + Double.parseDouble(silverPrice1);
			if(silverPrice2 != null && !silverPrice2.equals("") )
				sqlCondition = sqlCondition + " and pl.common_Price <= " + Double.parseDouble(silverPrice2);
			if(godenPrice1 != null && !godenPrice1.equals("") )
				sqlCondition = sqlCondition + " and pl.card_Price >= " + Double.parseDouble(godenPrice1);
			if(godenPrice2 != null && !godenPrice2.equals("") )
				sqlCondition = sqlCondition + " and pl.card_Price <= " + Double.parseDouble(godenPrice2);
			
			if(platina_Price1 != null && !platina_Price1.equals("") )
				sqlCondition = sqlCondition + " and pl.platina_Price >= " + Double.parseDouble(platina_Price1);
			if(platina_Price2 != null && !platina_Price2.equals("") )
				sqlCondition = sqlCondition + " and pl.platina_Price <= " + Double.parseDouble(platina_Price2);
			if(discount1 != null && !discount1.equals("") )
				sqlCondition = sqlCondition + " and pi.discount >= " + Double.parseDouble(discount1);
			if(discount2 != null && !discount2.equals("") )
				sqlCondition = sqlCondition + " and pi.discount <= " + Double.parseDouble(discount2);
			if(supplierID != null && !supplierID.equals("") )
				sqlCondition = sqlCondition + " and pi.supplier_ID = " + Integer.parseInt(supplierID);
			if(publishingHouse != null && !publishingHouse.equals("") )
				sqlCondition = sqlCondition + " and pi.publishing_House = " + Integer.parseInt(publishingHouse);
			
			if(ifPresell != null && !ifPresell.equals("") )
				sqlCondition = sqlCondition + " and pi.is_pre_sell = " + Integer.parseInt(ifPresell);
			if(isSet != null && !isSet.equals("") )
				sqlCondition = sqlCondition + " and pi.is_set = " + Integer.parseInt(isSet);
			if(clubID != null && !clubID.equals("") )
				sqlCondition = sqlCondition + " and pi.clubid = " + Integer.parseInt(clubID);
			if(ageSegment != null && !ageSegment.equals("") )
				sqlCondition = sqlCondition + " and pi.age_Segment = '" + ageSegment +"'";
			
			if (categoryID != null && !"".equals(categoryID) && Integer.parseInt(categoryID) != 0) {
				sqlCondition = sqlCondition
						+ " and category_id in (select catalog_id from PRD_ITEM_CATEGORY start with catalog_id = "
						+ Integer.parseInt(categoryID)
						+ " connect by parent_id = prior catalog_id)";
			}
			
			
			if (qty != null && !"".equals(qty) ) {
				sqlCondition = sqlCondition
						+ " and pi.item_id in (select item_id from jxc.sto_stock where sto_no = '000' and (use_qty - frozen_qty) >= "
						+ Integer.parseInt(qty) + " )";
			}
			
			sql = sql + sqlCondition;
			System.out.println(sql);
			pstmt = con.prepareStatement(sql);
			rs = pstmt.executeQuery();
			int recordCount = 0;
			if (rs.next()) {
				recordCount = rs.getInt(1);
			}

			pageModel.setRecordCount(recordCount);
			rs.close();
			pstmt.close();
			String sQuery = "";
			sQuery = "select pi.item_id,pi.item_code,pi.name,pi.is_set,pi.item_type,pi.standard_price,pl.common_price,card_price,web_price,pl.platina_price,pi.maxsalenum "
					+
					//", erp.f_get_item_avail_quantity(pi.item_id, 1) as
					// avail_qty" +
					" from prd_items pi,prd_pricelist_lines pl where  pi.item_id= pl.item_id and pl.PRICELIST_ID = 0 ";
			sQuery = sQuery + sqlCondition;
			//log.info("1"+sQuery);
			pstmt = con.prepareStatement(sQuery);
			rs = pstmt.executeQuery();
			int recNo = 0;

			while (rs.next()) {
				if (recNo >= pageModel.getFrom() && recNo <= pageModel.getTo()) {
					Product info = new Product();
					info.setItemID(rs.getString("item_id"));
					info.setItemCode(rs.getString("item_code"));
					info.setName(rs.getString("name"));
					info.setIsSet(rs.getString("is_set"));
					info.setType(rs.getInt("item_type"));
					info.setStandardPrice(rs.getFloat("standard_price"));
					info.setSilverPrice(rs.getFloat("common_price"));
					info.setGodenPrice(rs.getFloat("card_price"));
					info.setWebPrice(rs.getFloat("web_price"));
					info.setPlatina_Price(rs.getFloat("platina_price"));
					info.setMaxsalenum(rs.getInt("maxsalenum"));
					//info.setAvailQty(rs.getInt("avail_qty"));//add by user
					// 2006-01-05
					list.add(info);
				} else if (recNo > pageModel.getTo()) {
					break;
				}
				recNo++;
			}
			//pageModel.setRecordCount
			pageModel.setModelList(list);
		} catch (SQLException e) {
			System.out.println();
			throw e;
		} finally {
			if (rs != null)
				try {
					rs.close();
				} catch (Exception e) {
				}
			if (pstmt != null)
				try {
					pstmt.close();
				} catch (Exception e) {
				}
		}
		return pageModel;
	}

	/**
	 * 用于团购 add by user 2006-01-20
	 * 
	 * @param con
	 * @param pageModel
	 * @return
	 * @throws Exception
	 */
	public CommonPageUtil queryGroup(Connection con, CommonPageUtil pageModel)
			throws Exception {

		PreparedStatement pstmt = null;

		ResultSet rs = null;

		ArrayList list = new ArrayList();
		try {
			String product_id = (String) pageModel.getCondition().get(
					"productCode");
			String product_name = (String) pageModel.getCondition().get(
					"productName");
			String product_type = (String) pageModel.getCondition().get(
					"productType");
			String is_set = (String) pageModel.getCondition().get("isSet");

			String categoryID = (String) pageModel.getCondition().get(
					"categoryID");

			String qty = (String) pageModel.getCondition().get("qty");
	
			String sql = null;
			String sqlCondition = "";
			sql = "select count(*) from prd_items pi,prd_pricelist_lines pl where pi.item_id= pl.item_id and pl.PRICELIST_ID = 0 ";
			if (product_type != null && !(product_type.equals("0"))) {
				sqlCondition = sqlCondition + " and pi.item_type = "
						+ product_type;
			}
			if (product_id != null && !(product_id.equals(""))) {
				sqlCondition = sqlCondition + " and pi.item_code = '"
						+ product_id + "'";
			}
			if (product_name != null && !(product_name.equals(""))) {
				sqlCondition = sqlCondition + " and pi.name like '%"
						+ product_name + "%'";
			}
			if (is_set != null && is_set.equals("n"))
				sqlCondition = sqlCondition + " and pi.is_set = 0";

			if (categoryID != null && !"".equals(categoryID)) {
				sqlCondition = sqlCondition
						+ " and exists (select 1 from PRD_ITEM_CATEGORY t where pi.category_id = t.catalog_id start with catalog_id = "
						+ Integer.parseInt(categoryID)
						+ " connect by parent_id = prior catalog_id)";
			}

			if (qty != null && !"".equals(qty)) {
				sqlCondition = sqlCondition
						+ " and pi.item_id in (select item_id from jxc.sto_stock where sto_no = '000' and (use_qty - frozen_qty) >= "
						+ Integer.parseInt(qty) + " )";
			}
			
			sql = sql + sqlCondition;
			System.out.println(sql);
			pstmt = con.prepareStatement(sql);

			rs = pstmt.executeQuery();
			int recordCount = 0;
			if (rs.next()) {
				recordCount = rs.getInt(1);
			}
			pageModel.setRecordCount(recordCount);
			rs.close();
			pstmt.close();
			String sQuery = "";
			sQuery = "select pi.item_id,pi.item_code,pi.name,pi.is_set,pi.item_type,pi.standard_price,pl.common_price,card_price,web_price,pl.platina_price"
					+ ",pi.maxsalenum, erp.f_get_item_avail_quantity(pi.item_id, 1) as avail_qty"
					+ " from prd_items pi,prd_pricelist_lines pl where  pi.item_id= pl.item_id and pl.PRICELIST_ID = 0 ";
			sQuery = sQuery + sqlCondition;
			//log.info("1"+sQuery);
			pstmt = con.prepareStatement(sQuery);
			rs = pstmt.executeQuery();
			int recNo = 0;
			while (rs.next()) {
				if (recNo >= pageModel.getFrom() && recNo <= pageModel.getTo()) {
					Product info = new Product();
					info.setItemID(rs.getString("item_id"));
					info.setItemCode(rs.getString("item_code"));
					info.setName(rs.getString("name"));
					info.setIsSet(rs.getString("is_set"));
					info.setType(rs.getInt("item_type"));
					info.setStandardPrice(rs.getFloat("standard_price"));
					info.setSilverPrice(rs.getFloat("common_price"));
					info.setGodenPrice(rs.getFloat("card_price"));
					info.setWebPrice(rs.getFloat("web_price"));
					info.setPlatina_Price(rs.getFloat("platina_price"));
					info.setMaxsalenum(rs.getInt("maxsalenum"));
					info.setAvailQty(rs.getInt("avail_qty"));//add by user
					// 2006-01-05
					list.add(info);
				} else if (recNo > pageModel.getTo()) {
					break;
				}
				recNo++;
			}
			//pageModel.setRecordCount
			pageModel.setModelList(list);
		} catch (SQLException e) {
			System.out.println();
			throw e;
		} finally {
			if (rs != null)
				try {
					rs.close();
				} catch (Exception e) {
				}
			if (pstmt != null)
				try {
					pstmt.close();
				} catch (Exception e) {
				}
		}
		return pageModel;
	}

	public com.magic.crm.product.form.ProductForm findByPrimaryKey(
			Connection con, String pk) throws SQLException {
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		com.magic.crm.product.form.ProductForm info = new com.magic.crm.product.form.ProductForm();

		try {
			String sQuery = "SELECT pi.ITEM_ID, pi.COMPANY_ID, pi.ITEM_CODE,pi.NAME, pi.UNIT, pi.BARCODE,pi.ISBN, pi.AUTHOR, pi.STATUS, pi.COMMENTS, pi.ITEM_TITLE,"
					+ " pi.STANDARD_PRICE,pi.IS_COMMITMENT, pi.IS_CUR_CATALOG,pi.PRODUCT_OWNER_ID, pi.ITEM_TYPE, pi.INVENTORY_AVAILABLE,"
					+ " pi.IS_SELF_PRODUCED, pi.IS_LAST_SELL, pi.PURCHASING_COST,pi.OPERATOR_ID, pi.OPERATE_TIME, pi.TAX,pi.SUPPLIER_DELIVERY_TYPE,"
					+ " pi.IS_SET,pi.USER_STATUS, pi.REPLACE_ITEM_ID, pi.ICP_CODE,pi.RETURN_RATE,pi.ITEM_PECULIARITY, pi.category_ID,pi.SUPPLIER_ID,pi.PUBLISHING_HOUSE,pi.clubid, "
					+ " pi.UNPURCHASING_COST, pi.DISCOUNT,pi.CONTRACT_TITLE,pi.is_Pre_sell,pr.common_price,pr.card_price,pr.web_price,pr.platina_price,pi.Maxsalenum, pi.age_segment, "
					+ " pi.is_return, pi.return_days, pi.balance_method, pi.return_goods_rate,pi.is_web "
					+ "FROM prd_items pi,PRD_PRICELIST_LINES pr "
					+ " WHERE pr.pricelist_id = 0 and pi.item_id = pr.item_id and pi.item_id = "
					+ pk;
			pstmt = con.prepareStatement(sQuery);
			rs = pstmt.executeQuery();

			if (rs.next()) {
				info.setItemID(rs.getString("item_id"));
				info.setReplaceItemID(ProductDAO.getItemCode(con, rs
						.getString("replace_item_id")));
				info.setUnit(rs.getInt("unit"));
				info.setIsbn(rs.getString("isbn"));
				info.setAuthor(rs.getString("author"));
				info.setComments(rs.getString("comments"));
				info.setPeculiarity(rs.getString("ITEM_PECULIARITY"));
				info.setTitle(rs.getString("ITEM_TITLE"));
				info.setStatus(rs.getInt("status"));
				info.setStandardPrice(rs.getFloat("standard_Price"));
				info.setItemType(rs.getInt("item_type"));
				info.setInventoryStatus(rs.getInt("INVENTORY_AVAILABLE"));
				info.setIsSelfProduced(rs.getInt("IS_SELF_PRODUCED"));
				info.setIsLastSel(rs.getInt("IS_LAST_SELL"));
				info.setPurchasingCost(rs.getFloat("PURCHASING_COST"));
				info.setInventoryAvailable(rs.getInt("INVENTORY_AVAILABLE"));
				info.setTax(rs.getInt("tax"));
				info.setDeliveryType(rs.getInt("SUPPLIER_DELIVERY_TYPE"));
				info.setUserStatus(rs.getInt("user_Status"));

				info.setIsSet(rs.getString("is_Set"));
				info.setContractTitle(rs.getString("contract_Title"));
				info.setIcpCode(rs.getString("icp_Code"));
				info.setPublishingHouse(rs.getInt("PUBLISHING_HOUSE"));
				info.setReturnRate(rs.getFloat("RETURN_RATE"));
				info.setUnpurchasingCost(rs.getFloat("UNPURCHASING_COST"));
				info.setDiscount(rs.getFloat("discount"));
				info.setIsCurCatalog(rs.getString("IS_CUR_CATALOG"));
				info.setIsCommitment(rs.getString("IS_COMMITMENT"));
				info.setItemCode(rs.getString("item_Code"));
				info.setName(rs.getString("name"));
				info.setBarCode(rs.getString("BARCODE"));
				info.setProductOwnerID(rs.getInt("PRODUCT_OWNER_ID"));
				info.setOperatorID(rs.getInt("OPERATOR_ID"));
				info.setCategoryID(rs.getInt("category_ID"));
				info.setSupplierID(rs.getInt("supplier_ID"));
				info.setSilverPrice(rs.getFloat("common_price"));
				info.setGodenPrice(rs.getFloat("card_price"));
				info.setWebPrice(rs.getFloat("web_price"));
				info.setifPresell(rs.getInt("is_Pre_sell"));
				info.setClubID(rs.getString("clubid"));
				info.setAgeSegment(rs.getString("age_segment"));
				info.setIsReturn(rs.getInt("is_return"));
				info.setReturnDays(rs.getInt("return_days"));
				info.setBalanceMethod(rs.getInt("balance_method"));
				info.setReturnGoodsRate(rs.getDouble("return_goods_rate"));
				info.setPlatina_Price(rs.getFloat("platina_price"));
				info.setMaxsalenum(rs.getInt("Maxsalenum"));
				info.setIs_Web(rs.getInt("is_web"));
				//System.out.println(info.getReturnGoodsRate()+"******************"+info.getReturnDays());
			} else {
				return null;
			}
		} catch (SQLException e) {

			throw e;
		} finally {
			if (rs != null)
				try {
					rs.close();
				} catch (Exception e) {
				}
			if (pstmt != null)
				try {
					pstmt.close();
				} catch (Exception e) {
				}
		}
		return info;
	}

	public com.magic.crm.product.form.ProductForm findDetailByPK(
			Connection con, String pk) throws SQLException {
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		com.magic.crm.product.form.ProductForm info = new com.magic.crm.product.form.ProductForm();

		try {
			String sQuery = "SELECT pi.ITEM_ID, pi.COMPANY_ID, pi.ITEM_CODE,pi.NAME, pi.UNIT, pi.BARCODE,pi.ISBN, pi.AUTHOR, pi.STATUS, pi.COMMENTS, pi.ITEM_TITLE,"
					+ " pi.STANDARD_PRICE,pi.IS_COMMITMENT, pi.IS_CUR_CATALOG,pi.PRODUCT_OWNER_ID, pi.ITEM_TYPE, pi.INVENTORY_AVAILABLE,"
					+ " pi.IS_SELF_PRODUCED, pi.IS_LAST_SELL, pi.PURCHASING_COST,pi.OPERATOR_ID, pi.OPERATE_TIME, pi.TAX,pi.SUPPLIER_DELIVERY_TYPE,"
					+ " pi.IS_SET,pi.USER_STATUS, pi.REPLACE_ITEM_ID, pi.ICP_CODE,pi.RETURN_RATE,pi.ITEM_PECULIARITY, pi.category_ID,pi.SUPPLIER_ID,pi.PUBLISHING_HOUSE, "
					+ " pi.UNPURCHASING_COST, pi.DISCOUNT,pi.CONTRACT_TITLE ,pi.is_Pre_sell,pi.clubid,op.name oname,p.pro_name,pr.common_price,pr.card_price,pr.web_price,pr.platina_price,pi.Maxsalenum,pi.is_web,pc.catalog_name, pi.age_segment "
					+ " FROM prd_items pi,org_persons op,providers p,PRD_PRICELIST_LINES pr,PRD_ITEM_CATEGORY pc"
					+ " WHERE pi.PRODUCT_OWNER_ID = op.id and pi.SUPPLIER_ID = p.id and pr.pricelist_id = 0 and pi.item_id = pr.item_id and pc.catalog_id = pi.category_ID and pi.item_id = "
					+ pk;
			pstmt = con.prepareStatement(sQuery);
			rs = pstmt.executeQuery();
			
			if (rs.next()) {
				info.setItemID(rs.getString("item_id"));
				info.setReplaceItemID(ProductDAO.getItemCode(con, rs
						.getString("replace_item_id")));
				info.setUnit(rs.getInt("unit"));
				info.setIsbn(rs.getString("isbn"));
				info.setAuthor(rs.getString("author"));
				info.setComments(rs.getString("comments"));
				info.setPeculiarity(rs.getString("ITEM_PECULIARITY"));
				info.setTitle(rs.getString("ITEM_TITLE"));
				info.setStatus(rs.getInt("status"));
				info.setStandardPrice(rs.getFloat("standard_Price"));
				info.setItemType(rs.getInt("item_type"));
				info.setInventoryStatus(rs.getInt("INVENTORY_AVAILABLE"));
				info.setIsSelfProduced(rs.getInt("IS_SELF_PRODUCED"));
				info.setIsLastSel(rs.getInt("IS_LAST_SELL"));
				info.setPurchasingCost(rs.getFloat("PURCHASING_COST"));
				info.setInventoryAvailable(rs.getInt("INVENTORY_AVAILABLE"));
				info.setTax(rs.getInt("tax"));
				info.setDeliveryType(rs.getInt("SUPPLIER_DELIVERY_TYPE"));
				info.setUserStatus(rs.getInt("user_Status"));
				info.setifPresell(rs.getInt("is_Pre_sell"));
				info.setIsSet(rs.getString("is_Set"));
				info.setContractTitle(rs.getString("contract_Title"));
				info.setIcpCode(rs.getString("icp_Code"));
				info.setPublishingHouse(rs.getInt("PUBLISHING_HOUSE"));
				info.setReturnRate(rs.getFloat("RETURN_RATE"));
				info.setUnpurchasingCost(rs.getFloat("UNPURCHASING_COST"));
				info.setDiscount(rs.getFloat("discount"));
				info.setIsCurCatalog(rs.getString("IS_CUR_CATALOG"));
				info.setIsCommitment(rs.getString("IS_COMMITMENT"));
				info.setItemCode(rs.getString("item_Code"));
				info.setName(rs.getString("name"));
				info.setBarCode(rs.getString("BARCODE"));
				info.setProductOwnerID(rs.getInt("PRODUCT_OWNER_ID"));
				info.setProductOwnerName(rs.getString("oname"));
				info.setOperatorID(rs.getInt("OPERATOR_ID"));
				info.setOperateTime(DateUtil.getDate(rs
						.getString("OPERATE_TIME"), "yyyy-MM-dd"));
				info.setCategoryID(rs.getInt("category_ID"));
				info.setSupplierID(rs.getInt("supplier_ID"));
				info.setSupplierName(rs.getString("pro_name"));
				info.setSilverPrice(rs.getFloat("common_price"));
				info.setGodenPrice(rs.getFloat("card_price"));
				info.setWebPrice(rs.getFloat("web_price"));
				info.setCatalogName(rs.getString("catalog_name"));
				info.setClubID(rs.getString("clubid"));
				info.setAgeSegment(rs.getString("age_segment"));
				info.setPlatina_Price(rs.getFloat("platina_price"));
				info.setMaxsalenum(rs.getInt("Maxsalenum"));
				info.setIs_Web(rs.getInt("is_web"));
			} else {
				return null;
			}
		} catch (SQLException e) {

			throw e;
		} finally {
			if (rs != null)
				try {
					rs.close();
				} catch (Exception e) {
				}
			if (pstmt != null)
				try {
					pstmt.close();
				} catch (Exception e) {
				}
		}
		return info;
	}

	public ProductForm findByCode(Connection con, String itemCode)
			throws SQLException {
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int itid = 0;
		ProductForm info = new ProductForm();

		try {
			itid = ProductDAO.getItemID(con, itemCode);

			String sQuery = "SELECT pi.ITEM_ID, pi.COMPANY_ID, pi.ITEM_CODE,pi.NAME, pi.UNIT, pi.BARCODE,pi.ISBN, pi.AUTHOR, pi.STATUS, pi.COMMENTS, pi.ITEM_TITLE,"
					+ " pi.STANDARD_PRICE,pi.IS_COMMITMENT, pi.IS_CUR_CATALOG,pi.PRODUCT_OWNER_ID, pi.ITEM_TYPE, pi.INVENTORY_AVAILABLE,"
					+ " pi.IS_SELF_PRODUCED, pi.IS_LAST_SELL, pi.PURCHASING_COST,pi.OPERATOR_ID, pi.OPERATE_TIME, pi.TAX,pi.SUPPLIER_DELIVERY_TYPE,"
					+ " pi.IS_SET,pi.USER_STATUS, pi.REPLACE_ITEM_ID, pi.ICP_CODE,pi.RETURN_RATE,pi.ITEM_PECULIARITY, pi.category_ID,pi.SUPPLIER_ID,pi.PUBLISHING_HOUSE, "
					+ " pi.UNPURCHASING_COST, pi.DISCOUNT,pi.CONTRACT_TITLE ,pi.clubid,pr.common_price,pr.card_price,pr.web_price,pr.platina_price, pi.age_segment ,pi.Maxsalenum"
					+ " FROM prd_items pi,PRD_PRICELIST_LINES pr"
					+ " WHERE pr.pricelist_id = 0 and pi.item_id = pr.item_id and pi.item_id = "
					+ itid;
			pstmt = con.prepareStatement(sQuery);
			//log.info("3"+sQuery);
			rs = pstmt.executeQuery();
			
			if (rs.next()) {
				info.setItemID(rs.getString("item_id"));
				info.setReplaceItemID(ProductDAO.getItemCode(con, rs
						.getString("replace_item_id")));
				info.setUnit(rs.getInt("unit"));
				info.setIsbn(rs.getString("isbn"));
				info.setAuthor(rs.getString("author"));
				info.setComments(rs.getString("comments"));
				info.setPeculiarity(rs.getString("ITEM_PECULIARITY"));
				info.setTitle(rs.getString("ITEM_TITLE"));
				info.setStatus(rs.getInt("status"));
				info.setStandardPrice(rs.getFloat("standard_Price"));
				info.setItemType(rs.getInt("item_type"));
				info.setInventoryStatus(rs.getInt("INVENTORY_AVAILABLE"));
				info.setIsSelfProduced(rs.getInt("IS_SELF_PRODUCED"));
				info.setIsLastSel(rs.getInt("IS_LAST_SELL"));
				info.setPurchasingCost(rs.getFloat("PURCHASING_COST"));
				info.setInventoryAvailable(rs.getInt("INVENTORY_AVAILABLE"));
				info.setTax(rs.getInt("tax"));
				info.setDeliveryType(rs.getInt("SUPPLIER_DELIVERY_TYPE"));
				info.setUserStatus(rs.getInt("user_Status"));

				info.setIsSet(rs.getString("is_Set"));
				info.setContractTitle(rs.getString("contract_Title"));
				info.setIcpCode(rs.getString("icp_Code"));
				info.setPublishingHouse(rs.getInt("PUBLISHING_HOUSE"));
				info.setReturnRate(rs.getFloat("RETURN_RATE"));
				info.setUnpurchasingCost(rs.getFloat("UNPURCHASING_COST"));
				info.setDiscount(rs.getFloat("discount"));
				info.setIsCurCatalog(rs.getString("IS_CUR_CATALOG"));
				info.setIsCommitment(rs.getString("IS_COMMITMENT"));
				info.setItemCode(rs.getString("item_Code"));
				info.setName(rs.getString("name"));
				info.setBarCode(rs.getString("BARCODE"));
				info.setProductOwnerID(rs.getInt("PRODUCT_OWNER_ID"));
				info.setOperatorID(rs.getInt("OPERATOR_ID"));
				info.setOperateTime(DateUtil.getDate(rs
						.getString("OPERATE_TIME"), "yyyy-MM-dd"));
				info.setCategoryID(rs.getInt("category_ID"));
				info.setSupplierID(rs.getInt("supplier_ID"));
				info.setSilverPrice(rs.getFloat("common_price"));
				info.setGodenPrice(rs.getFloat("card_price"));
				info.setWebPrice(rs.getFloat("web_price"));
				info.setClubID(rs.getString("clubid"));
				info.setAgeSegment(rs.getString("age_segment"));
				info.setPlatina_Price(rs.getFloat("platina_price"));
				info.setMaxsalenum(rs.getInt("Maxsalenum"));
				//System.out.println("webprice "+rs.getString("web_price"));

			}
		} catch (SQLException e) {

			throw e;
		} finally {
			if (rs != null)
				try {
					rs.close();
				} catch (Exception e) {
				}
			if (pstmt != null)
				try {
					pstmt.close();
				} catch (Exception e) {
				}
		}
		return info;
	}

	public String insert(Connection con,
			com.magic.crm.product.form.ProductForm info) throws SQLException {
		CallableStatement cstmt = null;
		String sp = null;
		int re = 0;

		try {
			sp = "{?=call product.f_product_add(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?, ?, ?,?, ?, ?,?,?)}";
			cstmt = con.prepareCall(sp);
			cstmt.registerOutParameter(1, java.sql.Types.INTEGER);
			cstmt.setString(2, info.getItemCode());
			cstmt.setString(3, info.getName());
			cstmt.setString(4, info.getTitle());
			cstmt.setInt(5, info.getItemType());
			cstmt.setInt(6, info.getCategoryID());
			cstmt.setFloat(7, info.getStandardPrice());
			cstmt.setInt(8, info.getIsLastSel());
			cstmt.setString(9, Integer.toString(info.getUnit()));
			cstmt.setString(10, info.getAuthor());
			cstmt.setString(11, info.getPeculiarity());
			cstmt.setInt(12, info.getPublishingHouse());
			cstmt.setString(13, info.getIcpCode());
			cstmt.setString(14, info.getIsbn());
			cstmt.setFloat(15, info.getSilverPrice());
			cstmt.setFloat(16, info.getGodenPrice());
			cstmt.setFloat(17, info.getWebPrice());
			cstmt.setString(18, info.getBarCode());
			cstmt.setFloat(19, info.getDiscount());
			cstmt.setInt(20, info.getProductOwnerID());
			cstmt.setInt(21, info.getSupplierID());
			cstmt.setInt(22, info.getTax());
			cstmt.setInt(23, info.getDeliveryType());
			cstmt.setFloat(24, info.getReturnRate());
			cstmt.setInt(25, info.getUserStatus());
			cstmt.setInt(26, ProductDAO.getItemID(con, String.valueOf(info
					.getReplaceItemID())));
			cstmt.setString(27, info.getContractTitle());
			cstmt.setString(28, info.getComments());
			cstmt.setInt(29, 1);
			cstmt.setInt(30, info.getOperatorID());
			cstmt.setInt(31, info.getifPresell());
			cstmt.setString(32, info.getClubID());
			cstmt.setString(33, info.getAgeSegment()); // add by user 2006-02-24
													   // 11:17
			cstmt.setInt(34, info.getIsReturn());
			cstmt.setInt(35, info.getReturnDays());
			cstmt.setInt(36, info.getBalanceMethod());
			cstmt.setDouble(37, info.getReturnGoodsRate());
			cstmt.setFloat(38, info.getPlatina_Price());
			cstmt.setInt(39, info.getMaxsalenum());
			cstmt.setInt(40, info.getIs_Web());
			//System.out.println("hei is "+info.getPlatina_Price());
			
			cstmt.execute();
			re = cstmt.getInt(1);
			cstmt.close();
			if (re < 0) {
				System.out.println("re is " + re);
			}

		} catch (SQLException e) {
			if (con != null)
				try {
					con.rollback();
				} catch (Exception ex) {
				}
			e.printStackTrace();
			throw e;
		} finally {
			if (cstmt != null)
				try {
					cstmt.close();
				} catch (Exception e) {
				}
		}
		return String.valueOf(re);
	}

	public void update(Connection con,
			com.magic.crm.product.form.ProductForm info) throws JException, SQLException {

		String sp = null;
		CallableStatement cstmt = null;
		try {
			sp = "{?=call product.f_product_update(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?,?)}";
			cstmt = con.prepareCall(sp);
			cstmt.registerOutParameter(1, java.sql.Types.INTEGER);

			cstmt.setInt(2, Integer.parseInt(info.getItemID()));
			cstmt.setString(3, info.getName());
			cstmt.setString(4, info.getTitle());
			cstmt.setInt(5, info.getItemType());
			cstmt.setInt(6, info.getCategoryID());
			cstmt.setFloat(7, info.getStandardPrice());
			cstmt.setInt(8, info.getIsLastSel());
			cstmt.setInt(9, info.getUnit());
			cstmt.setString(10, info.getAuthor());
			cstmt.setString(11, info.getPeculiarity());
			cstmt.setInt(12, info.getPublishingHouse());
			cstmt.setString(13, info.getIcpCode());
			cstmt.setString(14, info.getIsbn());
			cstmt.setString(15, info.getBarCode());
			cstmt.setFloat(16, info.getDiscount());
			cstmt.setInt(17, info.getProductOwnerID());
			cstmt.setInt(18, info.getSupplierID());
			cstmt.setInt(19, info.getTax());
			cstmt.setInt(20, info.getDeliveryType());
			cstmt.setFloat(21, info.getReturnRate());
			cstmt.setInt(22, info.getUserStatus());
			cstmt.setFloat(23, ProductDAO.getItemID(con, String.valueOf(info
					.getReplaceItemID())));
			cstmt.setString(24, info.getContractTitle());
			cstmt.setString(25, info.getComments());
			cstmt.setInt(26, info.getOperatorID());
			cstmt.setInt(27, info.getifPresell());
			cstmt.setInt(28, Integer.parseInt(info.getClubID()));
			cstmt.setString(29, info.getAgeSegment());
			cstmt.setInt(30, info.getIsReturn());
			cstmt.setInt(31, info.getReturnDays());
			cstmt.setInt(32, info.getBalanceMethod());
			cstmt.setDouble(33, info.getReturnGoodsRate());
			cstmt.setInt(34, info.getMaxsalenum());
			cstmt.setInt(35, info.getIs_Web());
			cstmt.execute();
			int ret = cstmt.getInt(1);
			cstmt.close();
			if (ret != 0) {
				throw new JException("修改产品基本信息出错！错误号为：" + ret);
			}
		} catch (SQLException e) {
			if (con != null)
				try {
					con.rollback();
				} catch (Exception ex) {
				}
			//throw new JException("修改产品基本信息出错！" + e.toString());
				throw e;
		} finally {
			if (cstmt != null)
				try {
					cstmt.close();
				} catch (Exception e) {
				}
		}
	}
	/*
	 * 新增产品历史价目表
	 */
	public static void insertHistory(Connection con, ProductForm pf,int pricelist_id,String type) throws SQLException {
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int pricelist_line_id = 0;
		String sql = "";
		try {

			sql = "select id from prd_pricelist_lines where item_id="+pf.getItemID()+" and  pricelist_id="+pricelist_id;
			pstmt = con.prepareStatement(sql);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				pricelist_line_id = rs.getInt(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (rs != null)
				try {
					rs.close();
				} catch (Exception e) {
				}
			if (pstmt != null)
				try {
					pstmt.close();
				} catch (Exception e) {
				}
		}
		try {
			
			sql="insert into prd_pricelist_line_history";
			sql+="(id,PRICELIST_LINE_ID,ITEM_ID,PRICELIST_ID,SELL_TYPE,ORDER_REQUIRE,";
			sql+="OPERATOR_ID,STATUS,COMMON_PRICE,CARD_PRICE,WEB_PRICE,platina_price,";
			sql+=" modify_type,commitment,modify_date)";
			sql+=" values(seq_prd_pricelist_line_history.nextval,?,?,?,?,?,?,?,?,?,?,?,?,?,sysdate)";
			//sql+=" values(seq_prd_pricelist_line_history.nextval,"+pricelist_line_id+","+pf.getItemID()+",";
			//sql+=" 0,0,0,"+pf.getOperatorID()+","+pf.getSilverPrice()+","+pf.getGodenPrice()+","+pf.getWebPrice()+","+pf.getPlatina_Price()+",""
			
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, pricelist_line_id);
			pstmt.setString(2, pf.getItemID());
			pstmt.setInt(3, pricelist_id);
			pstmt.setInt(4, 0);
			pstmt.setInt(5, 0);
			pstmt.setInt(6, pf.getOperatorID());
			pstmt.setDouble(7, 0);
			pstmt.setDouble(8, pf.getSilverPrice());
			pstmt.setDouble(9, pf.getGodenPrice());
			pstmt.setDouble(10, pf.getWebPrice());
			pstmt.setDouble(11, pf.getPlatina_Price());
			pstmt.setString(12, type);
			pstmt.setInt(13, 1);
			pstmt.execute();

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (rs != null)
				try {
					rs.close();
				} catch (Exception e) {
				}
			if (pstmt != null)
				try {
					pstmt.close();
				} catch (Exception e) {
				}
		}
	}
	public void updatePrice(Connection con,
			com.magic.crm.product.form.ProductForm info) throws JException {

		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String sql = null;
		
		try {
            
			if (info.getWebPrice() != 0f) {
				sql = "update PRD_PRICELIST_LINES set COMMON_PRICE = ?,card_price = ?,web_price =?,platina_price=?,OPERATOR_ID=? where PRICELIST_ID = 0 and item_id = ?";

			} else {
				sql = "update PRD_PRICELIST_LINES set COMMON_PRICE = ?,card_price = ?,web_price =null,platina_price=?,OPERATOR_ID=? where PRICELIST_ID = 0 and item_id = ?";

			}

			//System.out.println(sql);
			pstmt = con.prepareStatement(sql);
			pstmt.setFloat(1, info.getSilverPrice());
			pstmt.setFloat(2, info.getGodenPrice());
			if (info.getWebPrice() != 0f) {
				pstmt.setFloat(3, info.getWebPrice());
				pstmt.setFloat(4, info.getPlatina_Price());
				pstmt.setInt(5, info.getOperatorID());
				pstmt.setInt(6, Integer.parseInt(info.getItemID()));

			} else {
				pstmt.setFloat(3, info.getPlatina_Price());
				pstmt.setInt(4, info.getOperatorID());
				pstmt.setInt(5, Integer.parseInt(info.getItemID()));

			}
			pstmt.execute();
			
			
		} catch (SQLException e) {
			throw new JException("修改产品销售价出错，错误信息：<br>" + e.toString());
		} finally {
			if (rs != null)
				try {
					rs.close();
				} catch (Exception e) {
				}
			if (pstmt != null)
				try {
					pstmt.close();
				} catch (Exception e) {
				}
		}
	}

	public void updateBarcode(Connection con,
			com.magic.crm.product.form.ProductForm info) throws JException {

		PreparedStatement pstmt = null;
		CallableStatement cstmt = null;
		String sql = null;
		try {

			sql = "update prd_items set barcode = ? where item_id = ?";

			pstmt = con.prepareStatement(sql);
			//con.setAutoCommit(false);
			if (info.getBarCode() == null
					|| info.getBarCode().trim().length() == 0) {
				Date today = new Date();
				SimpleDateFormat df = new SimpleDateFormat("yyMMdd");
				pstmt.setString(1, df.format(today) + info.getItemID());

			} else {
				pstmt.setString(1, info.getBarCode());
			}
			pstmt.setInt(2, Integer.parseInt(info.getItemID()));
			pstmt.execute();
			/*
			 * cstmt = con.prepareCall("{call jxc.p_product_for_update(?,?)}");
			 * cstmt.setInt(2, 1);
			 * cstmt.setInt(1,Integer.parseInt(info.getItemID()) );
			 * cstmt.execute(); cstmt.close();
			 */
			//con.commit();
		} catch (SQLException e) {
			//try {
				//con.rollback();
			//} catch (Exception ex) {
			e.printStackTrace();
				throw new JException("修改条码出错");
			//}
		} finally {
			if (cstmt != null)
				try {
					cstmt.close();
				} catch (Exception e) {
				}
			if (pstmt != null)
				try {
					pstmt.close();
				} catch (Exception e) {
				}
		}
	}

	public void delete(Connection con, String pk) throws SQLException {
		PreparedStatement pstmt = null;

		try {
			String sQuery = "update prd_items set status = '' WHERE item_id = ?";
			pstmt = con.prepareStatement(sQuery);
			pstmt.setInt(1, Integer.parseInt(pk));
			pstmt.execute();

		} catch (SQLException e) {
			if (con != null)
				try {
					con.rollback();
				} catch (Exception ex) {
				}
			throw e;
		} finally {
			if (pstmt != null)
				try {
					pstmt.close();
				} catch (Exception e) {
				}
		}
	}

	public int isSetProduct(Connection con, int itemID) throws SQLException {
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			String sQuery = "SELECT count(*) from prd_items where is_set=1 and item_id = "
					+ itemID;
			pstmt = con.prepareStatement(sQuery);

			rs = pstmt.executeQuery();

			if (rs.next() && rs.getInt(1) > 0) {
				return 1;
			} else {
				return 0;
			}

		} catch (SQLException e) {
			throw e;
		} finally {
			if (rs != null)
				try {
					rs.close();
				} catch (Exception e) {
				}
			if (pstmt != null)
				try {
					pstmt.close();
				} catch (Exception e) {
				}
		}

	}

	/*
	 * 2、套装产品插入产品单品表
	 */
	public String insertSet(Connection con, ProductForm psf, ProductForm pf)
			throws SQLException {
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ProductForm item = null;
		
		int set_item_id = 0;
		int price_id = 0;
		String item_code = "";
        
		String sql = "";
		String sql2 = "";
		String item_ids="";		
		try {

			String PDitemidSql = "select seq_PRD_ITEM_ID.nextval from dual";
			pstmt = con.prepareStatement(PDitemidSql);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				set_item_id = rs.getInt(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (rs != null)
				try {
					rs.close();
				} catch (Exception e) {
				}
			if (pstmt != null)
				try {
					pstmt.close();
				} catch (Exception e) {
				}
		}
		try {

			String PDpriceidSql = "select seq_PRD_PRICELIST_LINES_ID.nextval from dual";
			pstmt = con.prepareStatement(PDpriceidSql);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				price_id = rs.getInt(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (rs != null)
				try {
					rs.close();
				} catch (Exception e) {
				}
			if (pstmt != null)
				try {
					pstmt.close();
				} catch (Exception e) {
				}
		}
		try {

			String PDitemcodeSql = "select seq_prd_set_item.nextval from dual";
			pstmt = con.prepareStatement(PDitemcodeSql);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				item_code = rs.getString(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (rs != null)
				try {
					rs.close();
				} catch (Exception e) {
				}
			if (pstmt != null)
				try {
					pstmt.close();
				} catch (Exception e) {
				}
		}
		try {

			con.setAutoCommit(false);

			sql = "insert into prd_items (item_id,COMPANY_ID,ITEM_CODE,NAME,UNIT,STANDARD_PRICE,CATEGORY_ID,ITEM_TYPE,"
					+ " OPERATOR_ID,USER_STATUS,ITEM_PECULIARITY,tax,discount,unpurchasing_cost,purchasing_cost, "
					+ " PRODUCT_OWNER_ID,is_set,comments,is_last_sell,clubid, is_pre_sell ) "
					+ " values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?, ?)";
			pstmt = con.prepareStatement(sql);

			pstmt.setInt(1, set_item_id);
			pstmt.setInt(2, 1);
			pstmt.setString(3, "T" + item_code);
			pstmt.setString(4, psf.getName());
			pstmt.setInt(5, 2);
			pstmt.setDouble(6, psf.getStandardPrice());
			pstmt.setInt(7, psf.getCategoryID());
			pstmt.setInt(8, psf.getItemType());
			pstmt.setInt(9, psf.getOperatorID());
			pstmt.setInt(10, 1);
			pstmt.setString(11, "0");
			pstmt.setInt(12, 0);
			pstmt.setDouble(13, psf.getDiscount());
			pstmt.setDouble(14, psf.getUnpurchasingCost());
			pstmt.setDouble(15, psf.getPurchasingCost());
			pstmt.setInt(16, psf.getProductOwnerID());
			pstmt.setInt(17, 1);
			pstmt.setString(18, psf.getComments());
			pstmt.setInt(19, psf.getIsLastSel());
			pstmt.setString(20, psf.getClubID());
			pstmt.setInt(21, psf.getifPresell());
			
		    pstmt.execute();
			/*
			 * 产品价目表
			 */
			float spriceSum = 0;
			float gpriceSum = 0;
			float wpriceSum = 0;
			float ppriceSum = 0;
			ArrayList list = psf.getItem();
			
			for (int i = 0; i < list.size(); i++) {
				
				item = (ProductForm) list.get(i);
				item_ids=item_ids+","+item.getItemID();
				item.setItemCode(item.getItemID());
				item.setItemID(String.valueOf(set_item_id));
		
				this.insertItem(con, item);
				spriceSum += item.getSilverPrice();//套装普通价格
				gpriceSum += item.getGodenPrice();//套装金卡价格
				wpriceSum += item.getWebPrice(); //套装网上价格
				ppriceSum += item.getPlatina_Price();//套装白金价格

			}
			sql2 = "insert into PRD_PRICELIST_LINES(id,ITEM_ID,PRICELIST_ID,SELL_TYPE,ORDER_REQUIRE,"
					+ "OPERATOR_ID,STATUS,COMMON_PRICE,CARD_PRICE,WEB_PRICE,Platina_Price)values(?,?,?,?,?,?,?,?,?,?,?)";
			pstmt = con.prepareStatement(sql2);
			pstmt.setInt(1, price_id);
			pstmt.setInt(2, set_item_id);
			pstmt.setInt(3, 0);
			pstmt.setInt(4, 0);
			pstmt.setInt(5, 0);
			pstmt.setInt(6, 0);
			pstmt.setInt(7, 0);
			pstmt.setDouble(8, spriceSum);
			pstmt.setDouble(9, gpriceSum);
			pstmt.setDouble(10, wpriceSum);
			pstmt.setDouble(11, ppriceSum);

			pstmt.execute();
			psf.setItemID(String.valueOf(set_item_id));
			psf.setSilverPrice(spriceSum);
			psf.setGodenPrice(gpriceSum);
			psf.setWebPrice(wpriceSum);
			psf.setPlatina_Price(ppriceSum);
			ProductDAO.insertHistory(con,psf,0,"ADD");
			con.commit();
			
			changeItemStock(con,item_ids.substring(1,item_ids.length()));
		} catch (SQLException e) {
			try {
				con.rollback();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		} finally {
			if (rs != null)
				try {
					rs.close();
				} catch (Exception e) {
				}
			if (pstmt != null)
				try {
					pstmt.close();
				} catch (Exception e) {
				}
		}
		return "T" + item_code;
	}

	/*
	 * 增加产品价目
	 */
	public void insertPrice(Connection con, ProductForm pf) throws SQLException {
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		int price_id = 0;
		String sql2 = "";
		try {

			String PDpriceidSql = "select seq_PRD_PRICELIST_LINES_ID.nextval from dual";
			pstmt = con.prepareStatement(PDpriceidSql);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				price_id = rs.getInt(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (rs != null)
				try {
					rs.close();
				} catch (Exception e) {
				}
			if (pstmt != null)
				try {
					pstmt.close();
				} catch (Exception e) {
				}
		}
		try {

			sql2 = "insert into PRD_PRICELIST_LINES(id,ITEM_ID,PRICELIST_ID,SELL_TYPE,ORDER_REQUIRE,"
					+ "OPERATOR_ID,STATUS,COMMON_PRICE,CARD_PRICE,WEB_PRICE)values(?,?,?,?,?,?,?,?,?,?)";
			pstmt = con.prepareStatement(sql2);
			pstmt.setInt(1, price_id);
			pstmt.setString(2, pf.getItemID());
			pstmt.setInt(3, 0);
			pstmt.setInt(4, 0);
			pstmt.setInt(5, 0);
			pstmt.setInt(6, 0);
			pstmt.setInt(7, 0);
			pstmt.setDouble(8, pf.getSilverPrice());
			pstmt.setDouble(9, pf.getGodenPrice());
			pstmt.setDouble(10, pf.getWebPrice());
			pstmt.execute();

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (rs != null)
				try {
					rs.close();
				} catch (Exception e) {
				}
			if (pstmt != null)
				try {
					pstmt.close();
				} catch (Exception e) {
				}
		}
	}

	/*
	 * 
	 * @author user1 增加套装产品 TODO To change the template for this generated type
	 * comment go to Window - Preferences - Java - Code Style - Code Templates
	 */
	public void insertItem(Connection con,
			com.magic.crm.product.form.ProductForm info) throws SQLException {
		PreparedStatement pstmt = null;
		int pdid = 0;

		ResultSet rs = null;
		try {

			String PDidSql = "select seq_PRD_ITEM_SETS_id.nextval from dual";
			pstmt = con.prepareStatement(PDidSql);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				pdid = rs.getInt(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (rs != null)
				try {
					rs.close();
				} catch (Exception e) {
				}
			if (pstmt != null)
				try {
					pstmt.close();
				} catch (Exception e) {
				}
		}
		try {

			con.setAutoCommit(false);
			String sQuery = "INSERT INTO PRD_ITEM_SETS( ID,SET_ITEM_ID,PART_ITEM_ID,COMMON_PRICE,"
					+ "CARD_PRICE,WEB_PRICE,Platina_Price) VALUES(?, ?, ?, ?, ?, ?,?)";
			pstmt = con.prepareStatement(sQuery);

			pstmt.setInt(1, pdid);
			pstmt.setString(2, info.getItemID());
			pstmt.setString(3, info.getItemCode());
			pstmt.setDouble(4, info.getSilverPrice());
			pstmt.setDouble(5, info.getGodenPrice());
			pstmt.setDouble(6, info.getWebPrice());
			pstmt.setDouble(7, info.getPlatina_Price());
	

			pstmt.execute();

			con.commit();
		} catch (SQLException e) {
			e.printStackTrace();
			try {
				con.rollback();
			} catch (Exception ex) {
				e.printStackTrace();
			}
		} finally {
			if (rs != null)
				try {
					rs.close();
				} catch (Exception e) {
				}
			if (pstmt != null)
				try {
					pstmt.close();
				} catch (Exception e) {
				}
		}

	}

	/*
	 * @author user1 浏览套装产品套件信息
	 */
	public Collection viewProduct(Connection con, String item_id)
			throws SQLException {
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Collection productCol = new ArrayList();

		try {
			String sQuery = "select a.item_id,a.item_code,a.name,a.purchasing_Cost,a.standard_price,"
					+ " b.common_price,b.card_price,b.web_price,c.common_price,c.card_price,c.web_price,"
					+ " a.unpurchasing_cost,c.platina_Price,b.platina_Price, "
					+ " (select item_type from prd_items where item_id = " + item_id +" ) as item_type "
					+ " from prd_items a,prd_item_sets b ,prd_pricelist_lines c "
					+ " where a.item_id = b.part_item_id "
					+ " and b.set_item_id = " + item_id
					+ " and c.pricelist_id = 0 and a.item_id = c.item_id";
			pstmt = con.prepareStatement(sQuery);
			rs = pstmt.executeQuery();
			while (rs.next()) {
				ProductForm info = new ProductForm();
				info.setItemID(rs.getString(1));
				info.setItemCode(rs.getString(2));
				info.setName(rs.getString(3));
				info.setPurchasingCost(rs.getFloat(4));
				info.setStandardPrice(rs.getFloat(5));
				info.setHeight(rs.getFloat(6)); //替代
				info.setWeight(rs.getFloat(7)); //替代
				info.setWidth(rs.getFloat(8)); //替代
				info.setSilverPrice(rs.getFloat(9));
				info.setGodenPrice(rs.getFloat(10));
				info.setWebPrice(rs.getFloat(11));
				info.setUnpurchasingCost(rs.getFloat(12));
				info.setPlatina_Price(rs.getFloat(13));
				info.setLength(rs.getFloat(14));
				info.setItemType(rs.getInt(15));
				productCol.add(info);
			}
		} catch (SQLException e) {
			throw e;
		} finally {
			if (rs != null)
				try {
					rs.close();
				} catch (Exception e) {
				}
			if (pstmt != null)
				try {
					pstmt.close();
				} catch (Exception e) {
				}
		}
		return productCol;
	}

	/*
	 * @author user1 浏览套装产品主体信息
	 */
	public Collection viewProductDetail(Connection con, String item_id)
			throws SQLException {
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Collection productCol = new ArrayList();

		try {
			String sQuery = "select a.item_id,a.name ,a.ITEM_TYPE,a.comments,a.standard_price,a.category_id,"
					+ " b.catalog_name,c.common_price,c.card_price,c.web_price,a.is_last_sell,a.clubid,c.platina_Price, a.is_pre_sell "
					+ " from prd_items a,PRD_ITEM_CATEGORY b,PRD_PRICELIST_LINES c"
					+ " where a.CATEGORY_ID=b.CATALOG_ID and c.pricelist_id=0 and a.item_id=c.item_id and a.item_id="
					+ item_id;

			pstmt = con.prepareStatement(sQuery);
			rs = pstmt.executeQuery();

			if (rs.next()) {
				Product info = new Product();
				info.setItemID(rs.getString(1));
				info.setName(rs.getString(2));
				info.setType(rs.getInt(3));
				info.setComments(rs.getString(4));
				info.setStandardPrice(rs.getFloat(5));
				info.setCategoryID(rs.getString(6));
				info.setAuthor(rs.getString(7));//替代类别名称
				info.setSilverPrice(rs.getFloat(8));
				info.setGodenPrice(rs.getFloat(9));
				info.setWebPrice(rs.getFloat(10));
				info.setIsLastSel(rs.getInt(11));
				info.setClubID(rs.getString("clubid"));
				info.setPlatina_Price(rs.getFloat("platina_Price"));
				info.setifPresell(rs.getInt("is_pre_sell"));

				productCol.add(info);
			}
		} catch (SQLException e) {
			throw e;
		} finally {
			if (rs != null)
				try {
					rs.close();
				} catch (Exception e) {
				}
			if (pstmt != null)
				try {
					pstmt.close();
				} catch (Exception e) {
				}
		}
		return productCol;
	}

	/*
	 * 修改套装品套件信息
	 */

	/*
	 * 修改套装品信息
	 */
	public void updateSet(Connection con, ProductForm psf, ProductForm pf)
			throws SQLException {
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ProductForm item = null;
		
		String sql = "";
		String sql2 = "";
		try {

			con.setAutoCommit(false);
			sql = "update prd_items set NAME=?,STANDARD_PRICE=?,CATEGORY_ID=?,ITEM_TYPE=?,comments=?,"
					+ " OPERATOR_ID=?,discount=?,unpurchasing_cost=?,purchasing_cost=?,is_last_sell=?, is_pre_sell=? "
					+ " where item_id=?";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, psf.getName());
			pstmt.setDouble(2, psf.getStandardPrice());
			pstmt.setInt(3, psf.getCategoryID());
			pstmt.setInt(4, psf.getItemType());
			pstmt.setString(5, psf.getComments());
			pstmt.setInt(6, psf.getOperatorID());

			pstmt.setDouble(7, psf.getDiscount());
			pstmt.setDouble(8, psf.getUnpurchasingCost());
			pstmt.setDouble(9, psf.getPurchasingCost());
			pstmt.setInt(10, psf.getIsLastSel());
			pstmt.setInt(11, psf.getifPresell());
			pstmt.setString(12, psf.getItemID());

			pstmt.execute();
			/*
			 * 产品价目表
			 */
			float spriceSum = 0;
			float gpriceSum = 0;
			float wpriceSum = 0;
			float ppriceSum = 0;
			ArrayList list = psf.getItem();
			String delsql = "delete from PRD_ITEM_SETS where set_item_id='"
					+ psf.getItemID() + "'";
			pstmt = con.prepareStatement(delsql);
			pstmt.executeUpdate();
			for (int i = 0; i < list.size(); i++) {
				item = (ProductForm) list.get(i);
				item.setItemCode(item.getItemID());
				item.setItemID(psf.getItemID());

				this.insertItem(con, item);
				spriceSum += item.getSilverPrice();//套装普通价格
				gpriceSum += item.getGodenPrice();//套装金卡价格
				wpriceSum += item.getWebPrice(); //套装网上价格
				ppriceSum += item.getPlatina_Price(); //套装白金价格

			}

			sql2 = "update PRD_PRICELIST_LINES set COMMON_PRICE=?,CARD_PRICE=?,WEB_PRICE=?,Platina_Price=?,OPERATOR_ID=? where item_id=?";
			pstmt = con.prepareStatement(sql2);

			pstmt.setDouble(1, spriceSum);
			pstmt.setDouble(2, gpriceSum);
			pstmt.setDouble(3, wpriceSum);
			pstmt.setDouble(4, ppriceSum);
			pstmt.setInt(5, psf.getOperatorID());
			pstmt.setString(6, psf.getItemID());

			pstmt.executeUpdate();

			con.commit();
		} catch (SQLException e) {
			try {
				con.rollback();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		} finally {
			if (rs != null)
				try {
					rs.close();
				} catch (Exception e) {
				}
			if (pstmt != null)
				try {
					pstmt.close();
				} catch (Exception e) {
				}
		}

	}

	/*
	 * 根据ITEM_CODE获得ITEM_ID
	 */
	public static int getItemID(Connection con, String itemCode)
	throws SQLException {
	PreparedStatement pstmt = null;
	ResultSet rs = null;
	int itid = 0;
	
	try {
		String sQuery = "select item_id from prd_items where item_code='"
				+ itemCode + "'";
		pstmt = con.prepareStatement(sQuery);
		rs = pstmt.executeQuery();
	
		if (rs.next()) {
			itid = rs.getInt(1);
		}
	} catch (SQLException e) {
	
		throw e;
	} finally {
		if (rs != null)
			try {
				rs.close();
			} catch (Exception e) {
			}
		if (pstmt != null)
			try {
				pstmt.close();
			} catch (Exception e) {
			}
	}
	return itid;
	}

	/*
	 * 根据ITEM_ID获得ITEM_CODE
	 */
	public static int getItemCode(Connection con, String itemid)
			throws SQLException {
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int itid = 0;

		try {
			String sQuery = "select item_code from prd_items where item_id="
					+ itemid;
			pstmt = con.prepareStatement(sQuery);
			rs = pstmt.executeQuery();

			if (rs.next()) {
				itid = rs.getInt(1);
			}
		} catch (SQLException e) {

			throw e;
		} finally {
			if (rs != null)
				try {
					rs.close();
				} catch (Exception e) {
				}
			if (pstmt != null)
				try {
					pstmt.close();
				} catch (Exception e) {
				}
		}
		return itid;
	}
	/*
	 * 新增套装产品时，根据ITEM_ID 字符串获得串中item_id的最小库存，并且更新库存，促发WJL的TRIGGER
	 */
	public static void changeItemStock(Connection con, String itemid)
			throws SQLException {
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		int item_id=0;

		try {
			/*
			String sQuery = "select item_id from jxc.sto_stock ";
			sQuery+=" where sto_no='000' and item_id in ("+itemid+") order by (use_qty-frozen_qty),item_id "; 
				
			pstmt = con.prepareStatement(sQuery);
			rs = pstmt.executeQuery();

			if (rs.next()) {
				item_id=rs.getInt(1);
			}
*/
			String sql="update jxc.sto_stock set use_qty=use_qty+1 where  sto_no='000' and item_id in (select part_item_id from prd_item_sets where set_item_id="+itemid+")";
			pstmt = con.prepareStatement(sql);
			pstmt.executeUpdate();	
			String sql1="update jxc.sto_stock set use_qty=use_qty-1 where  sto_no='000' and item_id in (select part_item_id from prd_item_sets where set_item_id="+itemid+")";
			pstmt = con.prepareStatement(sql1);
			pstmt.executeUpdate();					
	//System.out.println(sql);
	//System.out.println(sql1);
		} catch (SQLException e) {

			throw e;
		} finally {
			if (rs != null)
				try {
					rs.close();
				} catch (Exception e) {
				}
			if (pstmt != null)
				try {
					pstmt.close();
				} catch (Exception e) {
				}
		}
	}	
	/**
	 * 判断产品B是否属于套装产品A
	 * @param con
	 * @param itemIdA
	 * @param itemIdB
	 * @return
	 * @throws SQLException
	 */
	public static int checkItemType(Connection conn, long shipDtlId, long orderDtlId) throws SQLException {
	    CallableStatement cstmt = null;
	    try {
			cstmt = conn
					.prepareCall("{? = call orders.f_check_item_type(?, ?)}");
			cstmt.setLong(2, shipDtlId);
			cstmt.setLong(3, orderDtlId);
			cstmt.registerOutParameter(1, java.sql.Types.INTEGER);
			cstmt.execute();
	
			int ret = cstmt.getInt(1);
			return ret;
	    } catch(SQLException ex) {
	        throw ex;
	    } finally {
	        if (cstmt != null)
	            cstmt.close();
	    }
	}
	/*
	 * 产品某段时间内的销量
	 * 
	 * @authormagic
	 *
	 * TODO To change the template for this generated type comment go to
	 * Window - Preferences - Java - Code Style - Code Templates
	 */
	public static int getItemSell(Connection conn, int days,int item_id) throws SQLException {
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int sell_num = 0;

		try {
			String sQuery = "select sum(b.quantity) from ord_headers a inner join ord_lines b"; 
			sQuery+=" on a.id=b.order_id where   b.item_id= "+item_id;	
			sQuery+=" and a.status=100 ";
			sQuery+=" and b.status>0 ";
			sQuery+=" and (round(sysdate)-a.release_date)<="+days;
			pstmt = conn.prepareStatement(sQuery);
			rs = pstmt.executeQuery();

			if (rs.next()) {
				sell_num = rs.getInt(1);
			}
		} catch (SQLException e) {

			throw e;
		} finally {
			if (rs != null)
				try {
					rs.close();
				} catch (Exception e) {
				}
			if (pstmt != null)
				try {
					pstmt.close();
				} catch (Exception e) {
				}
		}
		return sell_num;
		}
	/*
	 * 产品产品在途数量
	 * 
	 * @authormagic
	 *
	 * TODO To change the template for this generated type comment go to
	 * Window - Preferences - Java - Code Style - Code Templates
	 */
	public static int getPru_Qty(Connection conn, int item_id) throws SQLException {
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int pur_qty = 0;

		try {
			String sQuery = "select sum(b.pur_qty-b.in_qty) as qty from jxc.sto_pur_mst a inner join jxc.sto_pur_dtl b";
					sQuery+=" on a.pur_no=b.pur_no where a.status<4  and b.item_id= "+item_id;	

			pstmt = conn.prepareStatement(sQuery);
			rs = pstmt.executeQuery();

			if (rs.next()) {
				pur_qty = rs.getInt(1);
			}
		} catch (SQLException e) {

			throw e;
		} finally {
			if (rs != null)
				try {
					rs.close();
				} catch (Exception e) {
				}
			if (pstmt != null)
				try {
					pstmt.close();
				} catch (Exception e) {
				}
		}
		return pur_qty;
		}	
	/*
	 * 产品产品总入库数量
	 * 
	 * @authormagic
	 *
	 * TODO To change the template for this generated type comment go to
	 * Window - Preferences - Java - Code Style - Code Templates
	 */
	public static int getRk_Qty(Connection conn, int item_id) throws SQLException {
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int rk_qty = 0;

		try {
			String sQuery = "select sum(use_qty) from jxc.sto_rk_mst a inner join jxc.sto_rk_dtl b ";
				sQuery+=" on a.rk_no=b.rk_no where a.sto_no='000' and b.item_id= "+item_id;	

			pstmt = conn.prepareStatement(sQuery);
			rs = pstmt.executeQuery();

			if (rs.next()) {
				rk_qty = rs.getInt(1);
			}
		} catch (SQLException e) {

			throw e;
		} finally {
			if (rs != null)
				try {
					rs.close();
				} catch (Exception e) {
				}
			if (pstmt != null)
				try {
					pstmt.close();
				} catch (Exception e) {
				}
		}
		return rk_qty;
		}	
	/*
	 * 通过主键查找产品类型
	 * @authormagic
	 *
	 * TODO To change the template for this generated type comment go to
	 * Window - Preferences - Java - Code Style - Code Templates
	 */
	public static int getItemTypeByPk(Connection conn, int itemId) throws SQLException {
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int itemType = -1;

		try {
			String sQuery = "select item_type from prd_items where item_id = ?";	

			pstmt = conn.prepareStatement(sQuery);
			pstmt.setInt(1, itemId);
			rs = pstmt.executeQuery();

			if (rs.next()) {
				itemType = rs.getInt(1);
			}
		} catch (SQLException e) {

			throw e;
		} finally {
			if (rs != null)
				try {
					rs.close();
				} catch (Exception e) {
				}
			if (pstmt != null)
				try {
					pstmt.close();
				} catch (Exception e) {
				}
		}
		return itemType;
		}	
	
	/**
	 * 根据货号查找基础信息
	 * @param con
	 * @param pk
	 * @return
	 * @throws SQLException
	 */
	public static Product findBasicByItemCode(
			Connection con, String itemCode) throws SQLException {
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Product product = new Product();
		
		try {
			String sQuery = "select itm_code, itm_name from prd_item where itm_code = ? ";
			pstmt = con.prepareStatement(sQuery);
			pstmt.setString(1, itemCode);
			rs = pstmt.executeQuery();
			
			if (rs.next()) {
				//product.setItemID(rs.getString("item_id"));
				product.setItemCode(rs.getString("itm_code"));
				product.setName(rs.getString("itm_name"));
			} 
		} catch (SQLException e) {

			throw e;
		} finally {
			if (rs != null)
				try {
					rs.close();
				} catch (Exception e) {
				}
			if (pstmt != null)
				try {
					pstmt.close();
				} catch (Exception e) {
				}
		}
		return product;
	}
	
	/**
	 * 得到产品标准价格
	 * @param conn
	 * @param itemId
	 * @return
	 * @throws SQLException
	 */
	public static double getStandardPrice(Connection conn, int itemId) throws SQLException {
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		double price = 0;
		String sql = " select standard_price from prd_items where item_id = ? ";
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, itemId);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				price = rs.getDouble("standard_price");
			}
		} catch (SQLException ex) {
			throw ex;
		} finally {
			if (rs != null) {
				rs.close();
			}
			if (pstmt != null) {
				pstmt.close();
			}
		}
		return price;
	}
}