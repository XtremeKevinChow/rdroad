package com.magic.crm.user.action;

import java.sql.Connection;
import javax.servlet.http.*;
import org.apache.log4j.Logger;
import org.apache.struts.action.*;
import org.apache.struts.actions.DispatchAction;
import java.util.*;

import com.magic.crm.util.*;
import com.magic.crm.user.form.S_AREAForm;
import com.magic.crm.user.dao.S_AREADao;


/* 
 * this class is generated by codeGen 0.1 
 * create on Sun Aug 24 21:24:03 CST 2008
 * 
 * todo 
 */ 
public class S_AREAAction extends DispatchAction { 

	/** 
	 * 查询数据信息action  
	 * @param mapping struts mapping 
	 * @param form struts form 
	 * @param request request 
	 * @param response response 
	 * @return ActionForward 需要迁移的页面  
	 * @throws Exception 出现异常则抛出 
	 */ 
	public ActionForward view(ActionMapping mapping, 
			ActionForm form, 
			HttpServletRequest request, 
			HttpServletResponse response) throws Exception { 
		Connection conn = null; 
		S_AREAForm fm = (S_AREAForm) form;
		try { 
			conn = DBManager.getConnection(); 
			int ret = S_AREADao.selectByPK(conn,fm);
			
			fm.setProvs(S_AREADao.listProvince(conn));
			fm.setCitys(S_AREADao.listCity(conn,fm.getProvince()));
			
		} catch(Exception e) {
			e.printStackTrace();
			Message.setErrorMsg(request,e.getMessage());
			return mapping.findForward("error");
		} finally {
			if(conn!=null) try {conn.close();} catch(Exception e) {};
		}
		return mapping.findForward("editjsp");
	}

	/** 
	 * 显示所有数据action  
	 * @param mapping struts mapping 
	 * @param form struts form 
	 * @param request request 
	 * @param response response 
	 * @return ActionForward 需要迁移的页面  
	 * @throws Exception 出现异常则抛出 
	 */ 
	public ActionForward list(ActionMapping mapping, 
			ActionForm form, 
			HttpServletRequest request, 
			HttpServletResponse response) throws Exception { 
		Connection conn = null; 
		S_AREAForm fm = (S_AREAForm) form;
		try { 
			conn = DBManager.getConnection(); 
			//ArrayList al = S_AREADao.queryAll(conn);
			//request.setAttribute("list",al);
			ArrayList al = new ArrayList();
			if(fm.getProvince()!=null&&!fm.getProvince().equals("") 
					&&fm.getCity()!=null&&!fm.getCity().equals("")) {
				al = S_AREADao.queryByCity(conn,fm.getCity());
			} else if(fm.getPostcode()!=null&&!fm.getPostcode().equals("")) {
				al = S_AREADao.queryByPostcode(conn,fm.getPostcode());
			}
			request.setAttribute("list", al);
			fm.setProvs(S_AREADao.listProvince(conn));
			fm.setCitys(S_AREADao.listCity(conn,fm.getProvince()));
			
		} catch(Exception e) {
			e.printStackTrace();
			Message.setErrorMsg(request,e.getMessage());
			return mapping.findForward("error");
		} finally {
			if(conn!=null) try {conn.close();} catch(Exception e) {};
		}
		return mapping.findForward("queryjsp");
	}

	/** 
	 * 显示所有数据action  
	 * @param mapping struts mapping 
	 * @param form struts form 
	 * @param request request 
	 * @param response response 
	 * @return ActionForward 需要迁移的页面  
	 * @throws Exception 出现异常则抛出 
	 */ 
	public ActionForward queryPostCode(ActionMapping mapping, 
			ActionForm form, 
			HttpServletRequest request, 
			HttpServletResponse response) throws Exception { 
		Connection conn = null; 
		S_AREAForm fm = (S_AREAForm) form;
		try { 
			conn = DBManager.getConnection(); 
			//ArrayList al = S_AREADao.queryAll(conn);
			//request.setAttribute("list",al);
			ArrayList al = new ArrayList();
			if(fm.getPostcode()!=null&&!fm.getPostcode().equals("")) {
				al = S_AREADao.queryByPostcode2(conn,fm.getPostcode());
			}
			request.setAttribute("list", al);
			//fm.setProvs(S_AREADao.listProvince(conn));
			//fm.setCitys(S_AREADao.listCity(conn,fm.getProvince()));
			
		} catch(Exception e) {
			e.printStackTrace();
			Message.setErrorMsg(request,e.getMessage());
			return mapping.findForward("error");
		} finally {
			if(conn!=null) try {conn.close();} catch(Exception e) {};
		}
		return mapping.findForward("queryPostCode");
	}
	
	
	/** 
	 * 新增数据action  
	 * @param mapping struts mapping 
	 * @param form struts form 
	 * @param request request 
	 * @param response response 
	 * @return ActionForward 需要迁移的页面  
	 * @throws Exception 出现异常则抛出 
	 */ 
	public ActionForward insert(ActionMapping mapping, 
			ActionForm form, 
			HttpServletRequest request, 
			HttpServletResponse response) throws Exception { 
		Connection conn = null; 
		S_AREAForm fm = (S_AREAForm) form;
		try { 
			conn = DBManager.getConnection(); 
			int ret = S_AREADao.insert(conn,fm);
		} catch(Exception e) {
			e.printStackTrace();
			Message.setErrorMsg(request,e.getMessage());
			return mapping.findForward("error");
		} finally {
			if(conn!=null) try {conn.close();} catch(Exception e) {};
		}
		return mapping.findForward("query");
	}

	/** 
	 * 更新数据action  
	 * @param mapping struts mapping 
	 * @param form struts form 
	 * @param request request 
	 * @param response response 
	 * @return ActionForward 需要迁移的页面  
	 * @throws Exception 出现异常则抛出 
	 */ 
	public ActionForward update(ActionMapping mapping, 
			ActionForm form, 
			HttpServletRequest request, 
			HttpServletResponse response) throws Exception { 
		Connection conn = null; 
		S_AREAForm fm = (S_AREAForm) form;
		try { 
			conn = DBManager.getConnection(); 
			int ret = S_AREADao.updateByPK(conn,fm);
		} catch(Exception e) {
			e.printStackTrace();
			Message.setErrorMsg(request,e.getMessage());
			return mapping.findForward("error");
		} finally {
			if(conn!=null) try {conn.close();} catch(Exception e) {};
		}
		return mapping.findForward("query");
	}

	/** 
	 * 删除数据action  
	 * @param mapping struts mapping 
	 * @param form struts form 
	 * @param request request 
	 * @param response response 
	 * @return ActionForward 需要迁移的页面  
	 * @throws Exception 出现异常则抛出 
	 */ 
	public ActionForward delete(ActionMapping mapping, 
			ActionForm form, 
			HttpServletRequest request, 
			HttpServletResponse response) throws Exception { 
		Connection conn = null; 
		S_AREAForm fm = (S_AREAForm) form;
		try { 
			conn = DBManager.getConnection(); 
			int ret = S_AREADao.deleteByPK(conn,fm);
		} catch(Exception e) {
			e.printStackTrace();
			Message.setErrorMsg(request,e.getMessage());
			return mapping.findForward("error");
		} finally {
			if(conn!=null) try {conn.close();} catch(Exception e) {};
		}
		return mapping.findForward("query");
	}
} 