package com.magic.crm.user.dao;

/* 
 * @author CodeGen 0.1 
 * create on Sun Aug 24 20:59:23 CST 2008
 * 
 * todo 
 */ 

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

import org.apache.struts.util.LabelValueBean;

import com.magic.crm.user.form.*;

/* 
 * this class is generated by codeGen 0.1 
 * create on Sun Aug 24 20:59:23 CST 2008
 * 
 * todo 
 */ 
public class S_AREADao { 

	/** 
	 * 根据主键查询内容  
	 * @param conn 使用连接 
	 * @param info  
	 * @return 0 正常 <0  错误信息  >0 未使用 
	 * @throws SQLException 出现sql异常则抛出 
	 */ 
	public static int selectByPK(Connection conn,S_AREAForm info) throws SQLException { 
		int ret = 0; 
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String sql = "select * from s_area where 1=1 and AREACODE=? ";
		try { 
			pstmt = conn.prepareStatement(sql); 
			pstmt.setString(1,info.getAreacode());
			rs = pstmt.executeQuery();
			if (rs.next()) {
				info.setAreacode(rs.getString("AREACODE"));
				info.setAreaname(rs.getString("AREANAME"));
				info.setParentareacode(rs.getString("PARENTAREACODE"));
				info.setRoot(rs.getInt("ROOT"));
				info.setZone(rs.getInt("ZONE"));
				info.setIs_express(rs.getInt("IS_EXPRESS"));
				info.setPostcode(rs.getString("postcode"));
				
				info.setCity(info.getParentareacode());
			}
			rs.close();
			
			pstmt.setString(1, info.getCity());
			rs = pstmt.executeQuery();
			if(rs.next()) {
				//info.setCity(rs.getString("AREACODE"));
				info.setCityName(rs.getString("AREANAME"));
				info.setProvince(rs.getString("PARENTAREACODE"));
			}
			rs.close();
			
			pstmt.setString(1, info.getProvince());
			rs = pstmt.executeQuery();
			if(rs.next()) {
				info.setProvinceName(rs.getString("AREANAME"));
			}
			rs.close();
			
			
		} catch (SQLException e) {
			e.printStackTrace();
			throw e;
		} finally {
			if(rs!=null) try {rs.close();} catch(Exception e) {};
			if(pstmt!=null) try {pstmt.close();} catch(Exception e) {};
		}
		return ret;
	}

	/** 
	 * 取出所有数据  
	 * @param conn 使用连接 
	 * @return ArrayList 包含所有数据的表  
	 * @throws SQLException 出现sql异常则抛出 
	 */ 
	public static ArrayList queryByCity(Connection conn,String city ) throws SQLException { 
		ArrayList ret = new ArrayList(); 
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String sql = "select * from s_area where parentareacode=?";
		try { 
			pstmt = conn.prepareStatement(sql); 
			pstmt.setString(1, city);
			rs = pstmt.executeQuery();
			while (rs.next()) {
				S_AREAForm info = new S_AREAForm();
				info.setAreacode(rs.getString("AREACODE"));
				info.setAreaname(rs.getString("AREANAME"));
				info.setParentareacode(rs.getString("PARENTAREACODE"));
				info.setRoot(rs.getInt("ROOT"));
				info.setZone(rs.getInt("ZONE"));
				info.setIs_express(rs.getInt("IS_EXPRESS"));
				info.setPostcode(rs.getString("postcode"));
				ret.add(info);
			}
		} catch (SQLException e) {
			e.printStackTrace();
			throw e;
		} finally {
			if(rs!=null) try {rs.close();} catch(Exception e) {};
			if(pstmt!=null) try {pstmt.close();} catch(Exception e) {};
		}
		return ret;
	}
	
	public static ArrayList queryByPostcode(Connection conn,String postcode ) throws SQLException { 
		ArrayList ret = new ArrayList(); 
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String sql = "select * from s_area where postcode =?";
		try { 
			pstmt = conn.prepareStatement(sql); 
			pstmt.setString(1, postcode);
			rs = pstmt.executeQuery();
			while (rs.next()) {
				S_AREAForm info = new S_AREAForm();
				info.setAreacode(rs.getString("AREACODE"));
				info.setAreaname(rs.getString("AREANAME"));
				info.setParentareacode(rs.getString("PARENTAREACODE"));
				info.setRoot(rs.getInt("ROOT"));
				info.setZone(rs.getInt("ZONE"));
				info.setIs_express(rs.getInt("IS_EXPRESS"));
				info.setPostcode(rs.getString("postcode"));
				ret.add(info);
			}
		} catch (SQLException e) {
			e.printStackTrace();
			throw e;
		} finally {
			if(rs!=null) try {rs.close();} catch(Exception e) {};
			if(pstmt!=null) try {pstmt.close();} catch(Exception e) {};
		}
		return ret;
	}
	
	public static ArrayList queryByPostcode2(Connection conn,String postcode ) throws SQLException { 
		ArrayList ret = new ArrayList(); 
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String sql = "select * from s_area where postcode =?";
		try { 
			pstmt = conn.prepareStatement(sql); 
			pstmt.setString(1, postcode);
			rs = pstmt.executeQuery();
			while (rs.next()) {
				S_AREAForm info = new S_AREAForm();
				info.setAreacode(rs.getString("AREACODE"));
				info.setAreaname(rs.getString("AREANAME"));
				info.setParentareacode(rs.getString("PARENTAREACODE"));
				info.setRoot(rs.getInt("ROOT"));
				info.setZone(rs.getInt("ZONE"));
				info.setIs_express(rs.getInt("IS_EXPRESS"));
				info.setPostcode(rs.getString("postcode"));
				
				//增加取得省市区的步骤
				selectByPK(conn,info);
				
				ret.add(info);
			}
		} catch (SQLException e) {
			e.printStackTrace();
			throw e;
		} finally {
			if(rs!=null) try {rs.close();} catch(Exception e) {};
			if(pstmt!=null) try {pstmt.close();} catch(Exception e) {};
		}
		return ret;
	}
	
	/** 
	 * 取出所有数据  
	 * @param conn 使用连接 
	 * @return ArrayList 包含所有数据的表  
	 * @throws SQLException 出现sql异常则抛出 
	 */ 
	public static ArrayList queryAll(Connection conn) throws SQLException { 
		ArrayList ret = new ArrayList(); 
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String sql = "select * from s_area";
		try { 
			pstmt = conn.prepareStatement(sql); 
			rs = pstmt.executeQuery();
			if (rs.next()) {
				S_AREAForm info = new S_AREAForm();
				info.setAreacode(rs.getString("AREACODE"));
				info.setAreaname(rs.getString("AREANAME"));
				info.setParentareacode(rs.getString("PARENTAREACODE"));
				info.setRoot(rs.getInt("ROOT"));
				info.setZone(rs.getInt("ZONE"));
				info.setIs_express(rs.getInt("IS_EXPRESS"));
				info.setPostcode(rs.getString("postcode"));
				ret.add(info);
			}
		} catch (SQLException e) {
			e.printStackTrace();
			throw e;
		} finally {
			if(rs!=null) try {rs.close();} catch(Exception e) {};
			if(pstmt!=null) try {pstmt.close();} catch(Exception e) {};
		}
		return ret;
	}
	/** 
	 * 插入一条记录  
	 * @param conn 使用连接 
	 * @param info  
	 * @return >0 插入数据条数 <0  错误信息   
	 * @throws SQLException 出现sql异常则抛出 
	 */ 
	public static int insert(Connection conn,S_AREAForm info) throws SQLException { 
		int ret = 0; 
		PreparedStatement pstmt = null;
		String sql = "insert into s_area(AREACODE,AREANAME,PARENTAREACODE,ROOT,ZONE,IS_EXPRESS) values(?,?,?,?,?,?) ";
		try { 
			pstmt = conn.prepareStatement(sql); 
			pstmt.setString(1,info.getAreacode());
			pstmt.setString(2,info.getAreaname());
			pstmt.setString(3,info.getParentareacode());
			pstmt.setInt(4,info.getRoot());
			pstmt.setInt(5,info.getZone());
			pstmt.setInt(6,info.getIs_express());
			ret = pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw e;
		} finally {
			if(pstmt!=null) try {pstmt.close();} catch(Exception e) {};
		}
		return ret;
	}

	/** 
	 * 更新一条记录  
	 * @param conn 使用连接 
	 * @param info  
	 * @return >0 更新数据条数 <0  错误信息   
	 * @throws SQLException 出现sql异常则抛出 
	 */ 
	public static int updateByPK(Connection conn,S_AREAForm info) throws SQLException { 
		int ret = 0; 
		PreparedStatement pstmt = null;
		String sql = "update s_area set AREANAME=?, PARENTAREACODE=?, ROOT=?, ZONE=?, IS_EXPRESS=? ,postcode=? where AREACODE = ?  ";
		try { 
			pstmt = conn.prepareStatement(sql); 
			pstmt.setString(1,info.getAreaname());
			pstmt.setString(2,info.getParentareacode());
			pstmt.setInt(3,info.getRoot());
			pstmt.setInt(4,info.getZone());
			pstmt.setInt(5,info.getIs_express());
			pstmt.setString(6, info.getPostcode());
			pstmt.setString(7,info.getAreacode());
			ret = pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw e;
		} finally {
			if(pstmt!=null) try {pstmt.close();} catch(Exception e) {};
		}
		return ret;
	}

	/** 
	 * 删除一条记录  
	 * @param conn 使用连接 
	 * @param info  
	 * @return >0 删除数据条数 <0  错误信息   
	 * @throws SQLException 出现sql异常则抛出 
	 */ 
	public static int deleteByPK(Connection conn,S_AREAForm info) throws SQLException { 
		int ret = 0; 
		PreparedStatement pstmt = null;
		String sql = "delete from s_area where AREACODE = ? ";
		try { 
			pstmt = conn.prepareStatement(sql); 
			pstmt.setString(1,info.getAreacode());
			ret = pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw e;
		} finally {
			if(pstmt!=null) try {pstmt.close();} catch(Exception e) {};
		}
		return ret;
	}
	
	/** 
	 * 取出所有省数据  
	 * @param conn 使用连接 
	 * @return ArrayList 包含所有数据的表  
	 * @throws SQLException 出现sql异常则抛出 
	 */ 
	public static ArrayList listProvince(Connection conn) throws SQLException { 
		ArrayList ret = new ArrayList(); 
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String sql = "select * from s_area where parentareacode='0001'";
		try { 
			pstmt = conn.prepareStatement(sql); 
			rs = pstmt.executeQuery();
			while (rs.next()) {
				LabelValueBean info = new LabelValueBean();
				info.setValue(rs.getString("AREACODE"));
				info.setLabel(rs.getString("AREANAME"));
				
				ret.add(info);
			}
		} catch (SQLException e) {
			e.printStackTrace();
			throw e;
		} finally {
			if(rs!=null) try {rs.close();} catch(Exception e) {};
			if(pstmt!=null) try {pstmt.close();} catch(Exception e) {};
		}
		return ret;
	}

	/**
	 * 取出省对应的城市
	 * @param conn
	 * @param province
	 * @return
	 * @throws SQLException
	 */
	public static ArrayList listCity(Connection conn,String province) throws SQLException { 
		ArrayList ret = new ArrayList(); 
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String sql = "select * from s_area where parentareacode=?";
		try { 
			pstmt = conn.prepareStatement(sql); 
			pstmt.setString(1,province);
			rs = pstmt.executeQuery();
			while (rs.next()) {
				LabelValueBean info = new LabelValueBean();
				info.setValue(rs.getString("AREACODE"));
				info.setLabel(rs.getString("AREANAME"));
				
				ret.add(info);
			}
		} catch (SQLException e) {
			e.printStackTrace();
			throw e;
		} finally {
			if(rs!=null) try {rs.close();} catch(Exception e) {};
			if(pstmt!=null) try {pstmt.close();} catch(Exception e) {};
		}
		return ret;
	}
	
	/**
	 * 取出省对应的城市
	 * @param conn
	 * @param province
	 * @return
	 * @throws SQLException
	 */
	public static String listCityStr(Connection conn,String province) throws SQLException { 
		String str = "";
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String sql = "select * from s_area where parentareacode=?";
		try { 
			pstmt = conn.prepareStatement(sql); 
			pstmt.setString(1,province);
			rs = pstmt.executeQuery();
			while (rs.next()) {
				if(!"".equals(str)) {
					str += ",";
				}
				str = str + rs.getString("AREACODE") + "-" +  rs.getString("AREANAME");
			}
		} catch (SQLException e) {
			e.printStackTrace();
			throw e;
		} finally {
			if(rs!=null) try {rs.close();} catch(Exception e) {};
			if(pstmt!=null) try {pstmt.close();} catch(Exception e) {};
		}
		return str;
	}
	
	/**
	 * 取出城市对应的区
	 * @param conn
	 * @param province
	 * @return
	 * @throws SQLException
	 */
	public static ArrayList listSection(Connection conn,String city) throws SQLException { 
		ArrayList ret = new ArrayList(); 
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String sql = "select * from s_area where parentareacode=?";
		try { 
			pstmt = conn.prepareStatement(sql); 
			pstmt.setString(1,city);
			rs = pstmt.executeQuery();
			while (rs.next()) {
				LabelValueBean info = new LabelValueBean();
				info.setValue(rs.getString("AREACODE"));
				info.setLabel(rs.getString("AREANAME"));
				
				ret.add(info);
			}
		} catch (SQLException e) {
			e.printStackTrace();
			throw e;
		} finally {
			if(rs!=null) try {rs.close();} catch(Exception e) {};
			if(pstmt!=null) try {pstmt.close();} catch(Exception e) {};
		}
		return ret;
	}
	/**
	 * 取出城市对应的区
	 * @param conn
	 * @param province
	 * @return
	 * @throws SQLException
	 */
	public static String listSectionStr(Connection conn,String city) throws SQLException { 
		String str = ""; 
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String sql = "select * from s_area where parentareacode=?";
		try { 
			pstmt = conn.prepareStatement(sql); 
			pstmt.setString(1,city);
			rs = pstmt.executeQuery();
			while (rs.next()) {
				if(!"".equals(str)) {
					str += ",";
				}
				str = str + rs.getString("AREACODE") + "-" +  rs.getString("AREANAME");
				
			}
		} catch (SQLException e) {
			e.printStackTrace();
			throw e;
		} finally {
			if(rs!=null) try {rs.close();} catch(Exception e) {};
			if(pstmt!=null) try {pstmt.close();} catch(Exception e) {};
		}
		return str;
	}	
	
	public static String getParent(Connection conn,String code) throws SQLException { 
		String ret = "";
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String sql = "select parentareacode from s_area where  AREACODE=? ";
		try { 
			pstmt = conn.prepareStatement(sql); 
			pstmt.setString(1,code);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				
				ret = rs.getString("PARENTAREACODE");
			}
			
			
		} catch (SQLException e) {
			e.printStackTrace();
			throw e;
		} finally {
			if(rs!=null) try {rs.close();} catch(Exception e) {};
			if(pstmt!=null) try {pstmt.close();} catch(Exception e) {};
		}
		return ret;
	}
	
	public static String getFullBySection(Connection conn,String code) throws SQLException { 
		String ret = "";
		String parent = "";
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		String sql = "select parentareacode,areaname from s_area where  AREACODE=? ";
		try { 
			pstmt = conn.prepareStatement(sql); 
			pstmt.setString(1,code);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				parent = rs.getString("PARENTAREACODE");
				ret = rs.getString("areaname");
			}
			rs.close();
			pstmt.setString(1, parent);
			rs = pstmt.executeQuery();
			if(rs.next()) {
				parent = rs.getString("PARENTAREACODE");
				ret = rs.getString("areaname") + ret;
			}
			rs.close();
			pstmt.setString(1, parent);
			rs = pstmt.executeQuery();
			if(rs.next()) {
				parent = rs.getString("PARENTAREACODE");
				ret = rs.getString("areaname") + ret;
			}
			
			
		} catch (SQLException e) {
			e.printStackTrace();
			throw e;
		} finally {
			if(rs!=null) try {rs.close();} catch(Exception e) {};
			if(pstmt!=null) try {pstmt.close();} catch(Exception e) {};
		}
		return ret;
	}

} 