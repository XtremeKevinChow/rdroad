<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Magic.Framework.Data</name>
    </assembly>
    <members>
        <member name="T:Magic.Framework.Data.TypeConvert.Int32Convert">
            <summary>
            
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.TypeConvert.IntConvert">
            <summary>
            
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.TypeConvert.TypeConvert">
            <summary>
            
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.TypeConvert.ITypeConvert">
            <summary>
            <para>Convert the data between domain data types and database data types, so the client don't need to know about
            which data type the database takes.</para>
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.ITypeConvert.GetValue(System.Data.IDataReader,System.Int32,System.Type)">
            <summary>
            <para>Get the value from <see cref="T:System.Data.IDataReader"/>, convert it to <paramref name="returnType"/></para>
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> that contains the data to be read.</param>
            <param name="index">The index of the field in <paramref name="IDataReader"/> that to be read.</param>
            <param name="returnType">The <see cref="T:System.Type"/> of the return value.</param>
            <returns>The value boxed with specific type.</returns>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.ITypeConvert.ConfigParameter(System.Type,System.Data.Common.DbParameter,Magic.Framework.Data.DbTypeInfo,System.Object)">
            <summary>
            Convert the <paramref name="value"/> to the database data type and set it to the <see cref="T:System.Data.Common.DbParameter"/>
            </summary>
            <param name="customDbParameterType"></param>
            <param name="parameter"></param>
            <param name="typeInfo"></param>
            <param name="value"></param>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.TypeConvert.#ctor(Magic.Framework.Data.StdDbType,System.Int32)">
            <summary>
            
            </summary>
            <param name="stdDbType"></param>
            <param name="customDbTypeValue"></param>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.TypeConvert.GetValue(System.Data.IDataReader,System.Int32,System.Type)">
            <summary>
            <para>Get the value from <see cref="T:System.Data.IDataReader"/>, convert it to <paramref name="returnType"/></para>
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> that contains the data to be read.</param>
            <param name="index">The index of the field in <paramref name="IDataReader"/> that to be read.</param>
            <param name="returnType">The <see cref="T:System.Type"/> of the return value.</param>
            <returns>The value boxed with specific type.</returns>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.TypeConvert.ConfigParameter(System.Type,System.Data.Common.DbParameter,Magic.Framework.Data.DbTypeInfo,System.Object)">
            <summary>
            Convert the <paramref name="value"/> to the database data type and set it to the <see cref="T:System.Data.Common.DbParameter"/>
            </summary>
            <param name="customDbParameterType"></param>
            <param name="parameter"></param>
            <param name="typeInfo"></param>
            <param name="value"></param>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.TypeConvert.SetValue(System.Data.Common.DbParameter,Magic.Framework.Data.DbTypeInfo,System.Object)">
            <summary>
            Convert the <paramref name="value"/> to the database data type and set it to the <see cref="T:System.Data.Common.DbParameter"/>
            </summary>
            <param name="parameter"></param>
            <param name="typeInfo"></param>
            <param name="value"></param>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.IntConvert.#ctor(Magic.Framework.Data.StdDbType,System.Int32)">
            <summary>
            
            </summary>
            <param name="stdDbType"></param>
            <param name="customDbTypeValue"></param>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.IntConvert.GetValue(System.Data.IDataReader,System.Int32,System.Type)">
            <summary>
            <para>Get the value from <see cref="T:System.Data.IDataReader"/>, convert it to <paramref name="returnType"/></para>
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> that contains the data to be read.</param>
            <param name="index">The index of the field in <paramref name="IDataReader"/> that to be read.</param>
            <param name="returnType">The <see cref="T:System.Type"/> of the return value.</param>
            <returns>The value boxed with specific type.</returns>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.IntConvert.SetValue(System.Data.Common.DbParameter,Magic.Framework.Data.DbTypeInfo,System.Object)">
            <summary>
            Set the value to <see cref="T:System.Data.Common.DbParameter"/>
            </summary>
            <param name="parameter"></param>
            <param name="typeInfo"></param>
            <param name="value"></param>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.Int32Convert.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="customDbTypeValue"></param>
        </member>
        <member name="T:Magic.Framework.Data.TypeConvert.UnicodeStringConvert">
            <summary>
            
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.TypeConvert.StringConvert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.StringConvert.#ctor(Magic.Framework.Data.StdDbType,System.Int32)">
            <summary>
            
            </summary>
            <param name="stdDbType"></param>
            <param name="customDbTypeValue"></param>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.StringConvert.GetValue(System.Data.IDataReader,System.Int32,System.Type)">
            <summary>
            <para>Get the value from <see cref="T:System.Data.IDataReader"/>, convert it to <paramref name="returnType"/></para>
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> that contains the data to be read.</param>
            <param name="index">The index of the field in <paramref name="IDataReader"/> that to be read.</param>
            <param name="returnType">The <see cref="T:System.Type"/> of the return value.</param>
            <returns>The value boxed with specific type.</returns>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.StringConvert.SetValue(System.Data.Common.DbParameter,Magic.Framework.Data.DbTypeInfo,System.Object)">
            <summary>
            Set the value to <see cref="T:System.Data.Common.DbParameter"/>
            </summary>
            <param name="parameter"></param>
            <param name="typeInfo"></param>
            <param name="value"></param>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.UnicodeStringConvert.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="customDbTypeValue"></param>
        </member>
        <member name="T:Magic.Framework.Data.Instrumentation.DataEvent">
            <summary>
            Base class for data WMI events.
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Instrumentation.DataEvent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Magic.Framework.Data.Instrumentation.DataEvent"/> class.
            </summary>
            <param name="instanceName">name of the <see cref="T:Magic.Framework.Data.Database"/> this event applies on.</param>
        </member>
        <member name="P:Magic.Framework.Data.Instrumentation.DataEvent.InstanceName">
            <summary>
            Gets the name of the <see cref="T:Magic.Framework.Data.Database"/> this event applies on.
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Configuration.Manageability.DatabaseSettingsManageabilityProvider.OverrideWithGroupPoliciesForConfigurationSection(Magic.Framework.Data.Configuration.DatabaseSettings,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationSection"/>'s properties with the Group Policy values from 
            the registry.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="policyKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides.</param>
        </member>
        <member name="M:Magic.Framework.Data.Configuration.Manageability.DatabaseSettingsManageabilityProvider.GenerateWmiObjectsForConfigurationSection(Magic.Framework.Data.Configuration.DatabaseSettings,System.Collections.Generic.ICollection{Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting})">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting"/> instances that describe the <paramref name="configurationSection"/>.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="wmiSettings">A collection to where the generated WMI objects are to be added.</param>
        </member>
        <member name="M:Magic.Framework.Data.Configuration.Manageability.DatabaseSettingsManageabilityProvider.OverrideWithGroupPoliciesAndGenerateWmiObjectsForConfigurationElements(Magic.Framework.Data.Configuration.DatabaseSettings,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,System.Boolean,System.Collections.Generic.ICollection{Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting})">
            <summary>
            Overrides the <paramref name="configurationSection"/>'s configuration elements' properties 
            with the Group Policy values from the registry, if any, and creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting"/> 
            instances that describe these configuration elements.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="generateWmiObjects"><see langword="true"/> if WMI objects must be generated; otherwise, 
            <see langword="false"/>.</param>
            <param name="wmiSettings">A collection to where the generated WMI objects are to be added.</param>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.Manageability.DatabaseSettingsManageabilityProvider.SectionCategoryName">
            <summary>
            Gets the name of the category that represents the whole configuration section.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.Manageability.DatabaseSettingsManageabilityProvider.SectionName">
            <summary>
            Gets the name of the managed configuration section.
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.TypeConvert.AnsiCharConvert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.AnsiCharConvert.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="customDbTypeValue"></param>
        </member>
        <member name="T:Magic.Framework.Data.Instrumentation.CommandFailedEvent">
            <summary>
            Represents the WMI event fired when a command failed during its execution.
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Instrumentation.CommandFailedEvent.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Magic.Framework.Data.Instrumentation.CommandFailedEvent"/> class.
            </summary>
            <param name="instanceName">The name of the <see cref="T:Magic.Framework.Data.Database"/> instance that executed the failed command.</param>
            <param name="connectionString">The connection string of the <see cref="T:Magic.Framework.Data.Database"/> that executed the failed command, with credentials removed.</param>
            <param name="commandText">The text of the command that failed its execution.</param>
            <param name="exceptionMessage">The message that describes the exception thrown when the command failed.</param>
        </member>
        <member name="P:Magic.Framework.Data.Instrumentation.CommandFailedEvent.CommandText">
            <summary>
            Gets the text of the command that failed its execution.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Instrumentation.CommandFailedEvent.ConnectionString">
            <summary>
            Gets the connection string of the <see cref="T:Magic.Framework.Data.Database"/> that executed the failed command, with credentials removed.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Instrumentation.CommandFailedEvent.ExceptionMessage">
            <summary>
            Gets the message that describes the exception thrown when the command failed.
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.Configuration.Manageability.ProviderMappingSetting">
            <summary>
            Represents the configuration information for a provider mapping defined by the Database Application Block
            configuration section.
            </summary>
            <seealso cref="T:Magic.Framework.Data.Configuration.DatabaseSettings"/>
            <seealso cref="T:Magic.Framework.Data.Configuration.DbProviderMapping"/>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.Manageability.ProviderMappingSetting.DatabaseType">
            <summary>
            Gets the type of the database to which the represented database mapping 
            maps its provider name.
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.TypeConvert.Int16Convert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.Int16Convert.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="customDbTypeValue"></param>
        </member>
        <member name="T:Magic.Framework.Data.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Properties.Resources.BlockName">
            <summary>
              Looks up a localized string similar to Enterprise Library Data Access Application Block.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Properties.Resources.CommandExecutedCounterHelpResource">
            <summary>
              Looks up a localized string similar to Commands Executed/sec is the rate at which database commands were executed..
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Properties.Resources.CommandFailedCounterHelpResource">
            <summary>
              Looks up a localized string similar to Commands Failed/sec is tha rate at which database commands failed to execute..
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Properties.Resources.ConfigurationFailureCreatingDatabase">
            <summary>
              Looks up a localized string similar to A configuration failure occurred while creating database ‘{0}’..
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Properties.Resources.ConnectionFailedCounterHelpResource">
            <summary>
              Looks up a localized string similar to Connections Failed/sec is the rate at which database connections failed to open..
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Properties.Resources.ConnectionOpenedCounterHelpResource">
            <summary>
              Looks up a localized string similar to Connections Opened/sec is the rate at which database connections were opened..
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Properties.Resources.CounterCategoryHelpResourceName">
            <summary>
              Looks up a localized string similar to Enterprise Library Data Performance Counter Instances.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Properties.Resources.ErrorConnectionFailedExtraInformation">
            <summary>
              Looks up a localized string similar to The connection string used was &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Properties.Resources.ErrorConnectionFailedMessage">
            <summary>
              Looks up a localized string similar to The error occurred using the &quot;{0}&quot; database instance while attempting to open the database connection..
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Properties.Resources.ExceptionCommandNotSqlCommand">
            <summary>
              Looks up a localized string similar to The command must be a SqlCommand..
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Properties.Resources.ExceptionDatabaseTypeDoesNotHaveAssemblerAttribute">
            <summary>
              Looks up a localized string similar to The database type {0} for the name {1} does not have the required [DatabaseAssembler] attribute required to build the database object..
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Properties.Resources.ExceptionDatabaseTypeDoesNotHaveRequiredConfigurationTypeAttribute">
            <summary>
              Looks up a localized string similar to The database type {0} does not have the required ConfigurationElementType attribute..
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Properties.Resources.ExceptionMessageParameterMatchFailure">
            <summary>
              Looks up a localized string similar to The number of parameters does not match number of values for stored procedure..
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Properties.Resources.ExceptionMessageUpdateDataSetArgumentFailure">
            <summary>
              Looks up a localized string similar to At least one command must be initialized.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Properties.Resources.ExceptionMessageUpdateDataSetRowFailure">
            <summary>
              Looks up a localized string similar to Failed to update row .
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Properties.Resources.ExceptionNoDatabaseDefined">
            <summary>
              Looks up a localized string similar to The requested database {0} is not defined in configuration..
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Properties.Resources.ExceptionNoProviderDefinedForConnectionString">
            <summary>
              Looks up a localized string similar to The requested database {0} does not have provider name set in the connection string..
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Properties.Resources.ExceptionNullOrEmptyString">
            <summary>
              Looks up a localized string similar to The value can not be null or an empty string..
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Properties.Resources.ExceptionParameterDiscoveryNotSupportedOnGenericDatabase">
            <summary>
              Looks up a localized string similar to Parameter discovery is not supported for connections using GenericDatabase. You must specify the parameters explicitly, or configure the connection to use a type deriving from Database that supports parameter discovery..
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Properties.Resources.ExceptionTableNameArrayEmpty">
            <summary>
              Looks up a localized string similar to The table name array used to map results to user-specified table names cannot be empty..
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Properties.Resources.ExceptionTypeNotDatabaseAssembler">
            <summary>
              Looks up a localized string similar to Type {0} is not an implementation of IDatabaseAssembler for DatabaseAssemblerAttribute..
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Properties.Resources.Password">
            <summary>
              Looks up a localized string similar to password=,pwd=.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Properties.Resources.UserName">
            <summary>
              Looks up a localized string similar to user id=,uid=.
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.Instrumentation.DataInstrumentationListenerBinder">
            <summary>
            This type supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Explicit binder for data access instrumentation.
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Instrumentation.DataInstrumentationListenerBinder.Bind(System.Object,System.Object)">
            <summary>
            Binds the events exposed by the source to the handlers in the listener.
            </summary>
            <param name="source">The source of instrumentation events. Must be an instance of <see cref="T:Magic.Framework.Data.Instrumentation.DataInstrumentationProvider"/>.</param>
            <param name="listener">The listener for instrumentation events. Must be an instance of <see cref="T:Magic.Framework.Data.Instrumentation.DataInstrumentationListener"/>.</param>
        </member>
        <member name="T:Magic.Framework.Data.Configuration.Manageability.Installer">
            <summary>
            Installer for the WMI objects defined in the assembly.
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.Configuration.DbProviderMapping">
            <summary>
            Represents the mapping from an ADO.NET provider to an Enterprise Library <see cref="T:Magic.Framework.Data.Database"/>.
            </summary>
            <remarks>
            <para>
            The Enterprise Library Data Access Application Block leverages the ADO.NET 2.0 provider factories. To determine what type of <see cref="T:Magic.Framework.Data.Database"/> matches a given provider factory type, the optional 
            <see cref="T:Magic.Framework.Data.Configuration.DbProviderMapping"/> configuration objects can be defined in the block's configuration section.
            </para>
            <para>
            If a mapping is not present for a given provider type, sensible defaults will be used:
            <list type="bullet">
            <item>For provider name "System.Data.SqlClient", or for a provider of type <see cref="T:System.Data.SqlClient.SqlClientFactory"/>, the 
            <see cref="T:Magic.Framework.Data.Sql.SqlDatabase"/> will be used.</item>
            <item>For provider name "System.Data.OracleClient", or for a provider of type <see cref="T:System.Data.OracleClient.OracleClientFactory"/>, the 
            <see cref="T:Magic.Framework.Data.Oracle.OracleDatabase"/> will be used.</item>
            <item>In any other case, the <see cref="T:Magic.Framework.Data.Generic.GenericDatabase"/> will be used.</item>
            </list>
            </para>
            </remarks>
            <seealso cref="M:Magic.Framework.Data.DatabaseConfigurationView.GetProviderMapping(System.String,System.String)"/>
            <seealso cref="T:System.Data.Common.DbProviderFactory"/>
        </member>
        <member name="F:Magic.Framework.Data.Configuration.DbProviderMapping.DefaultSqlProviderName">
            <summary>
            Default name for the Sql managed provider.
            </summary>
        </member>
        <member name="F:Magic.Framework.Data.Configuration.DbProviderMapping.DefaultOracleProviderName">
            <summary>
            Default name for the Oracle managed provider.
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Configuration.DbProviderMapping.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Magic.Framework.Data.Configuration.DbProviderMapping"/> class.
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Configuration.DbProviderMapping.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Magic.Framework.Data.Configuration.DbProviderMapping"/> class with name and <see cref="T:Magic.Framework.Data.Database"/> type.
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Configuration.DbProviderMapping.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Magic.Framework.Data.Configuration.DbProviderMapping"/> class with name and fully qualified type name of the <see cref="T:Magic.Framework.Data.Database"/> type.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.DbProviderMapping.DatabaseType">
            <summary>
            Gets or sets the type of database to use for the mapped ADO.NET provider.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.DbProviderMapping.DatabaseTypeName">
            <summary>
            Gets or sets the fully qualified type name of the database to use for the mapped ADO.NET provider.
            </summary>
            <value>
            The fully qualified type name of the database to use for the mapped ADO.NET provider.
            </value>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.DbProviderMapping.DbProviderName">
            <summary>
             Gets the logical name of the ADO.NET provider.
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.TypeConvert.NumberConvert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.NumberConvert.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="customDbTypeValue"></param>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.NumberConvert.GetValue(System.Data.IDataReader,System.Int32,System.Type)">
            <summary>
            <para>Get the value from <see cref="T:System.Data.IDataReader"/>, convert it to <paramref name="returnType"/></para>
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> that contains the data to be read.</param>
            <param name="index">The index of the field in <paramref name="IDataReader"/> that to be read.</param>
            <param name="returnType">The <see cref="T:System.Type"/> of the return value.</param>
            <returns>The value boxed with specific type.</returns>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.NumberConvert.SetValue(System.Data.Common.DbParameter,Magic.Framework.Data.DbTypeInfo,System.Object)">
            <summary>
            Set the value to <see cref="T:System.Data.Common.DbParameter"/>
            </summary>
            <param name="parameter"></param>
            <param name="typeInfo"></param>
            <param name="value"></param>
        </member>
        <member name="T:Magic.Framework.Data.TypeConvert.UnicodeClobConvert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.UnicodeClobConvert.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="customDbTypeValue"></param>
        </member>
        <member name="T:Magic.Framework.Data.DatabaseConfigurationView">
            <summary>
            <para>Represents a view for navigating the <see cref="P:Magic.Framework.Data.DatabaseConfigurationView.DatabaseSettings"/> configuration data.</para>
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.DatabaseConfigurationView.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Magic.Framework.Data.DatabaseConfigurationView"/> class with an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> object.</para>
            </summary>
            <param name="configurationSource">
            <para>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> object.</para>
            </param>
        </member>
        <member name="M:Magic.Framework.Data.DatabaseConfigurationView.GetConnectionStringSettings(System.String)">
            <summary>
            Returns the <see cref="T:System.Configuration.ConnectionStringSettings"/> object with the given name from the connection strings
            configuration section in the receiver's configuration source.
            </summary>
            <remarks>
            The connection string will be retrieved from the configuration source if it contains the connection strings section,
            otherwise it will be retrieved from the default configuration file.
            </remarks>
            <param name="name">The name for the desired connection string configuration.</param>
            <returns>The connection string configuration.</returns>
            <exception cref="T:System.ArgumentException">if <paramref name="name"/> is <see langword="null"/> (<b>Nothing</b> in Visual Basic) or empty.</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">if the connection string object is not found, or if it does not specify a provider name.</exception>
        </member>
        <member name="M:Magic.Framework.Data.DatabaseConfigurationView.GetProviderMapping(System.String,System.String)">
            <summary>
            Returns the <see cref="T:Magic.Framework.Data.Configuration.DbProviderMapping"/> that specifies the mapping between an ADO.NET provider factory and a
            <see cref="T:Magic.Framework.Data.Database"/> instance.
            </summary>
            <remarks>
            The mapping based in logical names will be probed first. If there is no success, the default type based mappings
            will be considered. If no default mapping is defined for the provider factory type, the generic database will be used.
            </remarks>
            <param name="name">The name of the <see cref="T:Magic.Framework.Data.Database"/> instance.</param>
            <param name="dbProviderName">The logical provider name.</param>
            <returns>The <see cref="T:Magic.Framework.Data.Configuration.DbProviderMapping"/> that matches the <paramref name="dbProviderName"/>.</returns>
        </member>
        <member name="P:Magic.Framework.Data.DatabaseConfigurationView.DatabaseSettings">
            <summary>
            <para>Gets the <see cref="P:Magic.Framework.Data.DatabaseConfigurationView.DatabaseSettings"/> configuration data.</para>
            </summary>
            <returns>
            <para>The <see cref="P:Magic.Framework.Data.DatabaseConfigurationView.DatabaseSettings"/> configuration data.</para>
            </returns>
        </member>
        <member name="P:Magic.Framework.Data.DatabaseConfigurationView.DefaultName">
            <summary>
            <para>Gets the name of the default configured <see cref="T:Magic.Framework.Data.Database"/>.</para>
            </summary>
            <returns>
            <para>The name of the default configured <see cref="T:Magic.Framework.Data.Database"/>.</para>
            </returns>
        </member>
        <member name="T:Magic.Framework.Data.Instrumentation.DefaultDataEventLogger">
            <summary>
            The instrumentation gateway when no instances of the objects from the block are involved.
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Instrumentation.DefaultDataEventLogger.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Magic.Framework.Data.Instrumentation.DefaultDataEventLogger"/> class, specifying whether 
            logging to the event log and firing WMI events is allowed.
            </summary>
            <param name="eventLoggingEnabled"><b>true</b> if writing to the event log is allowed, <b>false</b> otherwise.</param>
            <param name="wmiEnabled"><b>true</b> if firing WMI events is allowed, <b>false</b> otherwise.</param>
        </member>
        <member name="M:Magic.Framework.Data.Instrumentation.DefaultDataEventLogger.LogConfigurationError(System.Exception,System.String)">
            <summary>
            Logs the occurrence of a configuration error for the Enterprise Library Data Access Application Block through the 
            available instrumentation mechanisms.
            </summary>
            <param name="instanceName">Name of the <see cref="T:Magic.Framework.Data.Database"/> instance in which the configuration error was detected.</param>
            <param name="exception">The exception raised for the configuration error.</param>
        </member>
        <member name="T:Magic.Framework.Data.Instrumentation.ConnectionFailedEvent">
            <summary>
            Represents the WMI event fired when a connection failed to be established.
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Instrumentation.ConnectionFailedEvent.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Magic.Framework.Data.Instrumentation.ConnectionFailedEvent"/> class.
            </summary>
            <param name="instanceName">The name of the <see cref="T:Magic.Framework.Data.Database"/> instance that tried to establish the failed the connection.</param>
            <param name="connectionString">The connection string that caused the failed connection, with credentials removed.</param>
            <param name="exceptionMessage">The message that describes the exception thrown when the connection failed.</param>
        </member>
        <member name="P:Magic.Framework.Data.Instrumentation.ConnectionFailedEvent.ConnectionString">
            <summary>
            Gets the connection string that caused the failed connection, with credentials removed.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Instrumentation.ConnectionFailedEvent.ExceptionMessage">
            <summary>
            Gets the message that describes the exception thrown when the connection failed.
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.TypeConvert.Int64Convert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.Int64Convert.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="customDbTypeValue"></param>
        </member>
        <member name="T:Magic.Framework.Data.Oracle.OracleDataReaderWrapper">
            <devdoc>
            A wrapper to convert data for oracle for the reader.
            </devdoc>
        </member>
        <member name="M:Magic.Framework.Data.Oracle.OracleDataReaderWrapper.GetBoolean(System.Int32)">
            <devdoc>
            Bit data type is mapped to a number in Oracle database. When reading bit data from Oracle database,
            it will map to 0 as false and everything else as true.  This method uses System.Convert.ToBoolean() method
            for type conversions.
            </devdoc>        
        </member>
        <member name="M:Magic.Framework.Data.Oracle.OracleDataReaderWrapper.GetFloat(System.Int32)">
            <devdoc>
            When reading number from Oracle, data reader gets it back at decimal regardless of data type in
            Oracle database. This will cast the result to float data type.
            </devdoc>        
        </member>
        <member name="M:Magic.Framework.Data.Oracle.OracleDataReaderWrapper.GetGuid(System.Int32)">
            <devdoc>
            This method will cast the result data Guid data type. In Oracle you must use that as Raw(16) so
            that this method can convert that to Guid properly.
            </devdoc>        
        </member>
        <member name="T:Magic.Framework.Data.Oracle.Configuration.OracleConnectionSettings">
            <summary>
            Oracle-specific configuration section.
            </summary>
        </member>
        <member name="F:Magic.Framework.Data.Oracle.Configuration.OracleConnectionSettings.SectionName">
            <summary>
            The section name for the <see cref="T:Magic.Framework.Data.Oracle.Configuration.OracleConnectionSettings"/>.
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Oracle.Configuration.OracleConnectionSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Magic.Framework.Data.Oracle.Configuration.OracleConnectionSettings"/> class with default values.
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Oracle.Configuration.OracleConnectionSettings.GetSettings(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Retrieves the <see cref="T:Magic.Framework.Data.Oracle.Configuration.OracleConnectionSettings"/> from the configuration source.
            </summary>
            <param name="configurationSource">The configuration source to retrieve the configuration from.</param>
            <returns>The configuration section, or <see langword="null"/> (<b>Nothing</b> in Visual Basic) 
            if not present in the configuration source.</returns>
        </member>
        <member name="P:Magic.Framework.Data.Oracle.Configuration.OracleConnectionSettings.OracleConnectionsData">
            <summary>
            Collection of Oracle-specific connection information.
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.TypeConvert.SetDbTypeInvoker">
            <summary>
            <para>A delegate for the DbType setter method.</para>
            <para>This method will set the <paramref name="dbType"/> to SqlParameter.SqlDbType, OracleParameter.OracleType...</para>
            </summary>
            <param name="instance">A subclass of <see cref="T:System.Data.Common.DbParameter"/>, such as SqlParameter, OracleParameter...</param>
            <param name="customDbType">The value of the SqlDbType, OracleType...</param>
        </member>
        <member name="T:Magic.Framework.Data.TypeConvert.SetDbType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.SetDbType.Register(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="customDbTypePropertyName"></param>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.SetDbType.Get(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Magic.Framework.Data.Util.LogUtil">
            <summary>
            
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Util.LogUtil.Debug(System.Type,System.Object)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="message"></param>
        </member>
        <member name="M:Magic.Framework.Data.Util.LogUtil.Debug(System.Type,System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Magic.Framework.Data.Util.LogUtil.DebugFormat(System.Type,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Magic.Framework.Data.Util.LogUtil.Error(System.Type,System.Object)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="message"></param>
        </member>
        <member name="M:Magic.Framework.Data.Util.LogUtil.Error(System.Type,System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Magic.Framework.Data.Util.LogUtil.ErrorFormat(System.Type,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Magic.Framework.Data.Util.LogUtil.Fatal(System.Type,System.Object)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="message"></param>
        </member>
        <member name="M:Magic.Framework.Data.Util.LogUtil.Fatal(System.Type,System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Magic.Framework.Data.Util.LogUtil.FatalFormat(System.Type,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Magic.Framework.Data.Util.LogUtil.Info(System.Type,System.Object)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="message"></param>
        </member>
        <member name="M:Magic.Framework.Data.Util.LogUtil.Info(System.Type,System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Magic.Framework.Data.Util.LogUtil.InfoFormat(System.Type,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Magic.Framework.Data.Util.LogUtil.Warn(System.Type,System.Object)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="message"></param>
        </member>
        <member name="M:Magic.Framework.Data.Util.LogUtil.Warn(System.Type,System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Magic.Framework.Data.Util.LogUtil.WarnFormat(System.Type,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="P:Magic.Framework.Data.Util.LogUtil.DebugEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.Util.ConvertUtil">
            <summary>
            utilities that help to convert data between different types
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Util.ConvertUtil.GetString(System.Object,System.String)">
            <summary>
            Convert <see cref="T:System.Object"/> type value to <see cref="T:System.String"/> value
            </summary>
            <param name="value"></param>
            <param name="defaultValue">The default value if the object is null</param>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.Util.ConvertUtil.GetInt(System.Object,System.Int32)">
            <summary>
            Convert <see cref="T:System.Object"/> type value to <see cref="T:System.Int32"/> value
            </summary>
            <param name="value"></param>
            <param name="defaultValue">The default value if the object is null</param>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.Util.ConvertUtil.GetDateTime(System.Object,System.DateTime)">
            <summary>
            Convert <see cref="T:System.Object"/> type value to <see cref="T:System.DateTime"/> value
            </summary>
            <param name="value"></param>
            <param name="defaultValue">The default value if the object is null</param>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.Util.ConvertUtil.ObjectValueToLog(System.Object)">
            <summary>
            Convert the object value to a more readable format to log
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.Util.ConvertUtil.BoolFromConfig(System.String,System.Boolean)">
            <summary>
            Read a boolean value from the config file's attribute
            </summary>
            <param name="value"></param>
            <param name="defaultValue">The default value if the string is null or not correct configged</param>
            <returns></returns>
        </member>
        <member name="T:Magic.Framework.Data.TypeConvert.SingleConvert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.SingleConvert.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="customDbTypeValue"></param>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.SingleConvert.GetValue(System.Data.IDataReader,System.Int32,System.Type)">
            <summary>
            <para>Get the value from <see cref="T:System.Data.IDataReader"/>, convert it to <paramref name="returnType"/></para>
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> that contains the data to be read.</param>
            <param name="index">The index of the field in <paramref name="IDataReader"/> that to be read.</param>
            <param name="returnType">The <see cref="T:System.Type"/> of the return value.</param>
            <returns>The value boxed with specific type.</returns>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.SingleConvert.SetValue(System.Data.Common.DbParameter,Magic.Framework.Data.DbTypeInfo,System.Object)">
            <summary>
            Set the value to <see cref="T:System.Data.Common.DbParameter"/>
            </summary>
            <param name="parameter"></param>
            <param name="typeInfo"></param>
            <param name="value"></param>
        </member>
        <member name="T:Magic.Framework.Data.MySql.MySqlDatabase">
            <summary>
            <para>Represents a MySql Server database.</para>
            </summary>
            <remarks> 
            <para>
            Internally uses MySql Server .NET Managed Provider from Microsoft (MySql.Data.MySqlClient) to connect to the database.
            </para>  
            </remarks>
        </member>
        <member name="T:Magic.Framework.Data.Database">
            <summary>
            Represents an abstract database that commands can be run against. 
            </summary>
            <remarks>
            The <see cref="T:Magic.Framework.Data.Database"/> class leverages the provider factory model from ADO.NET. A database instance holds 
            a reference to a concrete <see cref="T:System.Data.Common.DbProviderFactory"/> object to which it forwards the creation of ADO.NET objects.
            </remarks>
        </member>
        <member name="F:Magic.Framework.Data.Database._instrumentationProvider">
            <summary>
            The <see cref="T:Magic.Framework.Data.Instrumentation.DataInstrumentationProvider"/> instance that defines the logical events used to instrument this <see cref="T:Magic.Framework.Data.Database"/> instance.
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Database.#ctor(System.String,System.Data.Common.DbProviderFactory,Magic.Framework.Data.IDialect)">
            <summary>
            Initializes a new instance of the <see cref="T:Magic.Framework.Data.Database"/> class with a connection string and a <see cref="T:System.Data.Common.DbProviderFactory"/>.
            </summary>
            <param name="connectionString">The connection string for the database.</param>
            <param name="dbProviderFactory">A <see cref="T:System.Data.Common.DbProviderFactory"/> object.</param>
            <param name="dialect">A <see cref="T:Magic.Framework.Data.IDialect"/> for difference databases.</param>
        </member>
        <member name="M:Magic.Framework.Data.Database.CreateConnection">
            <summary>
            <para>Creates a connection for this database.</para>
            </summary>
            <returns>
            <para>The <see cref="T:System.Data.Common.DbConnection"/> for this database.</para>
            </returns>
            <seealso cref="T:System.Data.Common.DbConnection"/>        
        </member>
        <member name="M:Magic.Framework.Data.Database.Microsoft#Practices#EnterpriseLibrary#Common#Instrumentation#IInstrumentationEventProvider#GetInstrumentationEventProvider">
            <summary>
            Returns the object to which the instrumentation events have been delegated.
            </summary>
            <returns>Object to which the instrumentation events have been delegated.</returns>
        </member>
        <member name="M:Magic.Framework.Data.Database.SameNumberOfParametersAndValues(System.Data.IDbCommand,System.Object[])">
            <summary>
            Determines if the number of parameters in the command matches the array of parameter values.
            </summary>
            <param name="command">The <see cref="T:System.Data.Common.DbCommand"/> containing the parameters.</param>
            <param name="values">The array of parameter values.</param>
            <returns><see langword="true"/> if the number of parameters and values match; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Magic.Framework.Data.Database.CreateCommandByCommandType(System.Data.CommandType,System.String)">
            <summary>
            <para>Creates a <see cref="T:System.Data.IDbCommand"/> for a SQL query.</para>
            </summary>
            <param name="commandType"></param>
            <param name="commandText"><para>SQL text</para></param>
            <returns><para>The <see cref="T:System.Data.IDbCommand"/> for the SQL query.</para></returns>        
        </member>
        <member name="M:Magic.Framework.Data.Database.CreateCommand">
            <summary>
            <para>Creates an <see cref="T:System.Data.IDbCommand"/>.</para>
            </summary>
            <returns><para>The <see cref="T:System.Data.IDbCommand"/>.</para></returns>
        </member>
        <member name="M:Magic.Framework.Data.Database.CreateSqlStringCommand(System.String)">
            <summary>
            <para>Creates an <see cref="T:System.Data.IDbCommand"/> to execute a SQL Query.</para>
            </summary>
            <param name="sql">SQL text</param>
            <returns>An <see cref="T:System.Data.IDbCommand"/></returns>
        </member>
        <member name="M:Magic.Framework.Data.Database.CreateSqlStringCommand(System.String,System.String[],Magic.Framework.Data.DbTypeInfo[],System.Object[])">
            <summary>
            <para>Creates an <see cref="T:System.Data.IDbCommand"/> to execute a SQL Query.</para>
            </summary>
            <param name="sql">SQL text</param>
            <param name="paramName">An array of paramters' name</param>
            <param name="paramInfo">An array of paramters' data type information</param>
            <param name="paramValue">An array of paramters' value</param>
            <returns>An <see cref="T:System.Data.IDbCommand"/></returns>
        </member>
        <member name="M:Magic.Framework.Data.Database.CreateSqlStringCommand(System.String,Magic.Framework.Data.StdParameter[])">
            <summary>
            <para>Creates an <see cref="T:System.Data.IDbCommand"/> to execute a SQL Query.</para>
            </summary>
            <param name="sql">SQL text</param>
            <param name="stdParameters">An array of <see cref="T:Magic.Framework.Data.StdParameter"/> that contains the parameter list</param>
            <returns>An <see cref="T:System.Data.IDbCommand"/></returns>
        </member>
        <member name="M:Magic.Framework.Data.Database.CreateStoredProcCommand(System.String)">
            <summary>
            <para>Creates an <see cref="T:System.Data.IDbCommand"/> to execute a stored procedure.</para>
            </summary>
            <param name="storedProcedureName"><para>The name of the stored procedure.</para></param>
            <returns><para>The <see cref="T:System.Data.IDbCommand"/> for the stored procedure.</para></returns>       
        </member>
        <member name="M:Magic.Framework.Data.Database.CreateStoredProcCommand(System.String,System.Object[])">
            <summary>
            <para>Creates an <see cref="T:System.Data.IDbCommand"/> for a stored procedure.</para>
            </summary>
            <param name="storedProcedureName"><para>The name of the stored procedure.</para></param>
            <param name="parameterValues">
            <para>An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns><para>The <see cref="T:System.Data.IDbCommand"/> for the stored procedure.</para></returns>
            <remarks>
            <para>The parameters for the stored procedure will be discovered and the values are assigned in positional order.</para>
            </remarks>        
        </member>
        <member name="M:Magic.Framework.Data.Database.SetParameterValue(System.Data.Common.DbParameter,System.Object)">
            <summary>
            Sets a parameter value.
            </summary>
            <param name="parameter"></param>
            <param name="value"></param>
        </member>
        <member name="M:Magic.Framework.Data.Database.BuildParameterName(System.String)">
            <summary>
            Builds a parameter name for the current database, the <paramref name="name"/> can not include the parameter token specific to a database.
            </summary>
            <param name="name">The name of the parameter.</param>
            <returns>A correctly formated parameter name.</returns>
        </member>
        <member name="M:Magic.Framework.Data.Database.DiscoverParameters(System.Data.IDbConnection,System.Data.IDbCommand)">
            <summary>
            Discovers the parameters for a <see cref="T:System.Data.Common.DbCommand"/>.
            </summary>
            <param name="connection"></param>
            <param name="command">The <see cref="T:System.Data.Common.DbCommand"/> to discover the parameters.</param>
        </member>
        <member name="M:Magic.Framework.Data.Database.ClearParameterCache">
            <summary>
            Clears the parameter cache. Since there is only one parameter cache that is shared by all instances
            of this class, this clears all parameters cached for all databases.
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Database.DeriveParameters(System.Data.IDbCommand)">
            <summary>
            Retrieves parameter information from the stored procedure specified in the <see cref="T:System.Data.Common.DbCommand"/> and populates the Parameters collection of the specified <see cref="T:System.Data.Common.DbCommand"/> object. 
            </summary>
            <param name="discoveryCommand">The <see cref="T:System.Data.Common.DbCommand"/> to do the discovery.</param>
        </member>
        <member name="M:Magic.Framework.Data.Database.CreateParameter(System.String)">
            <summary>
            <para>Adds a new instance of a <see cref="T:System.Data.Common.DbParameter"/> object.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <returns><para>An unconfigured parameter.</para></returns>
        </member>
        <member name="M:Magic.Framework.Data.Database.AddParameter(System.Data.IDbCommand,System.String,Magic.Framework.Data.DbTypeInfo,System.Object)">
            <summary>
            Add a <see cref="T:System.Data.Common.DbParameter"/> to the <paramref name="command"/>
            </summary>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> that <see cref="T:System.Data.Common.DbParameter"/> will be added to</param>
            <param name="parameterName">The parameter name</param>
            <param name="parammeterInfo">The parameter data type information</param>
            <param name="parameterValue">The parameter value</param>
        </member>
        <member name="M:Magic.Framework.Data.Database.AddParameter(System.Data.IDbCommand,Magic.Framework.Data.StdParameter[])">
            <summary>
            Add a <see cref="T:System.Data.Common.DbParameter"/> to the <paramref name="command"/>
            </summary>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> that <see cref="T:System.Data.Common.DbParameter"/> will be added to</param>
            <param name="param">
            <para>An array of paramters to add into the <paramref name="command"/>.</para>
            </param>
        </member>
        <member name="M:Magic.Framework.Data.Database.ExecuteDataSet(System.Data.IDbTransaction,System.Data.IDbCommand,System.Int32)">
            <summary>
            <para>Execute the <paramref name="command"/> and return a dataset</para>
            </summary>
            <param name="transaction">The <see cref="T:System.Data.IDbTransaction"/> used to execute the <paramref name="command"/></param>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to be executed</param>
            <param name="timeout">The time in seconds to wait for the command to execute. The default is 30 seconds.</param>
            <returns>A <see cref="T:System.Data.DataSet"/></returns>
        </member>
        <member name="M:Magic.Framework.Data.Database.ExecuteDataSet(System.Data.IDbTransaction,System.Data.IDbCommand)">
            <summary>
            <para>Execute the <paramref name="command"/> and return a dataset</para>
            </summary>
            <param name="transaction">The <see cref="T:System.Data.IDbTransaction"/> used to execute the <paramref name="command"/></param>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to be executed</param>
            <returns>A <see cref="T:System.Data.DataSet"/></returns>
        </member>
        <member name="M:Magic.Framework.Data.Database.ExecuteDataSet(System.Data.IDbConnection,System.Data.IDbCommand,System.Int32)">
            <summary>
            <para>Execute the <paramref name="command"/> and return a dataset</para>
            </summary>
            <param name="connection">The <see cref="T:System.Data.IDbConnection"/> used to execute the <paramref name="command"/></param>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to be executed</param>
            <param name="timeout">The time in seconds to wait for the command to execute. The default is 30 seconds.</param>
            <returns>A <see cref="T:System.Data.DataSet"/></returns>
        </member>
        <member name="M:Magic.Framework.Data.Database.ExecuteDataSet(System.Data.IDbConnection,System.Data.IDbCommand)">
            <summary>
            <para>Execute the <paramref name="command"/> and return a dataset</para>
            </summary>
            <param name="connection">The <see cref="T:System.Data.IDbConnection"/> used to execute the <paramref name="command"/></param>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to be executed</param>
            <returns>A <see cref="T:System.Data.DataSet"/></returns>
        </member>
        <member name="M:Magic.Framework.Data.Database.ExecuteScalar(System.Data.IDbTransaction,System.Data.IDbCommand,System.Int32)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns the first column of the first row in the result set returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="transaction">The <see cref="T:System.Data.IDbTransaction"/> used to execute the <paramref name="command"/></param>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to be executed</param>
            <param name="timeout">The time in seconds to wait for the command to execute. The default is 30 seconds.</param>
            <returns>
            <para>The first column of the first row in the result set.</para>
            </returns>
        </member>
        <member name="M:Magic.Framework.Data.Database.ExecuteScalar(System.Data.IDbTransaction,System.Data.IDbCommand)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns the first column of the first row in the result set returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="transaction">The <see cref="T:System.Data.IDbTransaction"/> used to execute the <paramref name="command"/></param>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to be executed</param>
            <returns>
            <para>The first column of the first row in the result set.</para>
            </returns>
        </member>
        <member name="M:Magic.Framework.Data.Database.ExecuteScalar(System.Data.IDbConnection,System.Data.IDbCommand,System.Int32)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns the first column of the first row in the result set returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="connection">The <see cref="T:System.Data.IDbConnection"/> used to execute the <paramref name="command"/></param>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to be executed</param>
            <param name="timeout">The time in seconds to wait for the command to execute. The default is 30 seconds.</param>
            <returns>
            <para>The first column of the first row in the result set.</para>
            </returns>
        </member>
        <member name="M:Magic.Framework.Data.Database.ExecuteScalar(System.Data.IDbConnection,System.Data.IDbCommand)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns the first column of the first row in the result set returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="connection">The <see cref="T:System.Data.IDbConnection"/> used to execute the <paramref name="command"/></param>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to be executed</param>
            <returns>
            <para>The first column of the first row in the result set.</para>
            </returns>
        </member>
        <member name="M:Magic.Framework.Data.Database.DoExecuteNonQuery(System.Data.IDbCommand)">
            <summary>
            Executes the query for <paramref name="command"/>.
            </summary>
            <param name="command">The <see cref="T:System.Data.Common.DbCommand"/> representing the query to execute.</param>
            <returns>The quantity of rows affected.</returns>
        </member>
        <member name="M:Magic.Framework.Data.Database.ExecuteNonQuery(System.Data.IDbTransaction,System.Data.IDbCommand,System.Int32)">
            <summary>
            <para>Executes the query for <paramref name="command"/></para>
            </summary>
            <param name="transaction">The <see cref="T:System.Data.IDbTransaction"/> used to execute the <paramref name="command"/></param>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to be executed</param>
            <param name="timeout">The time in seconds to wait for the command to execute. The default is 30 seconds.</param>
            <returns>The quantity of rows affected.</returns>
        </member>
        <member name="M:Magic.Framework.Data.Database.ExecuteNonQuery(System.Data.IDbTransaction,System.Data.IDbCommand)">
            <summary>
            <para>Executes the query for <paramref name="command"/></para>
            </summary>
            <param name="transaction">The <see cref="T:System.Data.IDbTransaction"/> used to execute the <paramref name="command"/></param>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to be executed</param>
            <returns>The quantity of rows affected.</returns>
        </member>
        <member name="M:Magic.Framework.Data.Database.ExecuteNonQuery(System.Data.IDbConnection,System.Data.IDbCommand,System.Int32)">
            <summary>
            <para>Executes the query for <paramref name="command"/></para>
            </summary>
            <param name="connection">The <see cref="T:System.Data.IDbConnection"/> used to execute the <paramref name="command"/></param>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to be executed</param>
            <param name="timeout">The time in seconds to wait for the command to execute. The default is 30 seconds.</param>
            <returns>The quantity of rows affected.</returns>
        </member>
        <member name="M:Magic.Framework.Data.Database.ExecuteNonQuery(System.Data.IDbConnection,System.Data.IDbCommand)">
            <summary>
            <para>Executes the query for <paramref name="command"/></para>
            </summary>
            <param name="connection">The <see cref="T:System.Data.IDbConnection"/> used to execute the <paramref name="command"/></param>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to be executed</param>
            <returns>The quantity of rows affected.</returns>
        </member>
        <member name="M:Magic.Framework.Data.Database.DoExecuteReader(System.Data.IDbCommand)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to be executed</param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>      
        </member>
        <member name="M:Magic.Framework.Data.Database.ExecuteReader(System.Data.IDbTransaction,System.Data.IDbCommand,System.Int32)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="transaction">The <see cref="T:System.Data.IDbTransaction"/> used to execute the <paramref name="command"/></param>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to be executed</param>
            <param name="timeout">The time in seconds to wait for the command to execute. The default is 30 seconds.</param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>        
        </member>
        <member name="M:Magic.Framework.Data.Database.ExecuteReader(System.Data.IDbTransaction,System.Data.IDbCommand)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="transaction">The <see cref="T:System.Data.IDbTransaction"/> used to execute the <paramref name="command"/></param>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to be executed</param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>        
        </member>
        <member name="M:Magic.Framework.Data.Database.ExecuteReader(System.Data.IDbConnection,System.Data.IDbCommand,System.Int32)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="connection">The <see cref="T:System.Data.IDbConnection"/> used to execute the <paramref name="command"/></param>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to be executed</param>
            <param name="timeout">The time in seconds to wait for the command to execute. The default is 30 seconds.</param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>        
        </member>
        <member name="M:Magic.Framework.Data.Database.ExecuteReader(System.Data.IDbConnection,System.Data.IDbCommand)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="connection">The <see cref="T:System.Data.IDbConnection"/> used to execute the <paramref name="command"/></param>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to be executed</param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>        
        </member>
        <member name="P:Magic.Framework.Data.Database.ConnectionStringNoCredentials">
            <summary>
            <para>Gets the connection string without the username and password.</para>
            </summary>
            <value>
            <para>The connection string without the username and password.</para>
            </value>
            <seealso cref="P:Magic.Framework.Data.Database.ConnectionString"/>
        </member>
        <member name="P:Magic.Framework.Data.Database.Dialect">
            <summary>
            
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Database.ConnectionString">
            <summary>
            <para>Gets the string used to open a database.</para>
            </summary>
            <value>
            <para>The string used to open a database.</para>
            </value>
            <seealso cref="P:System.Data.Common.DbConnection.ConnectionString"/>
        </member>
        <member name="M:Magic.Framework.Data.MySql.MySqlDatabase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Magic.Framework.Data.MySql.MySqlDatabase"/> class with a connection string.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:Magic.Framework.Data.MySql.MySqlDatabase.DeriveParameters(System.Data.IDbCommand)">
            <summary>
            Retrieves parameter information from the stored procedure specified in the <see cref="T:System.Data.Common.DbCommand"/> and populates the Parameters collection of the specified <see cref="T:System.Data.Common.DbCommand"/> object. 
            </summary>
            <param name="discoveryCommand">The <see cref="T:System.Data.Common.DbCommand"/> to do the discovery.</param>
            <remarks>The <see cref="T:System.Data.Common.DbCommand"/> must be a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> instance.</remarks>
        </member>
        <member name="T:Magic.Framework.Data.Configuration.DatabaseSettings">
            <summary>
            <para>Represents the root configuration for data.</para>
            </summary>
            <remarks>
            <para>The class maps to the <c>databaseSettings</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="F:Magic.Framework.Data.Configuration.DatabaseSettings.SectionName">
            <summary>
            The name of the data configuration section.
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Configuration.DatabaseSettings.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Magic.Framework.Data.Configuration.DatabaseSettings"/> class.</para>
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Configuration.DatabaseSettings.GetDatabaseSettings(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Retrieves the <see cref="T:Magic.Framework.Data.Configuration.DatabaseSettings"/> from a configuration source.
            </summary>
            <param name="configurationSource">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> to query for the database settings.</param>
            <returns>The database settings from the configuration source, or <see langword="null"/> (<b>Nothing</b> in Visual Basic) if the 
            configuration source does not contain database settings.</returns>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.DatabaseSettings.DefaultDatabase">
            <summary>
            <para>Gets or sets the default database instance name.</para>
            </summary>
            <value>
            <para>The default database instance name.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>defaultInstance</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.DatabaseSettings.ShowSql">
            <summary>
            whether show sql in log file
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.DatabaseSettings.DebugInfo">
            <summary>
            whether show debug information in log file
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.DatabaseSettings.ProviderMappings">
            <summary>
            Holds the optional mappings from ADO.NET's database providers to Enterprise Library's database types.
            </summary>
            <seealso cref="T:Magic.Framework.Data.Configuration.DbProviderMapping"/>
        </member>
        <member name="T:Magic.Framework.Data.Instrumentation.DataInstrumentationInstaller">
            <summary>
            Represents the installer for the instrumentation events. Not intended for direct use.
            </summary>
        </member>
        <member name="F:Magic.Framework.Data.Instrumentation.DataInstrumentationInstaller.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Instrumentation.DataInstrumentationInstaller.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Magic.Framework.Data.Instrumentation.DataInstrumentationInstaller.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Instrumentation.DataInstrumentationInstaller.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Magic.Framework.Data.Instrumentation.DataInstrumentationInstaller"/> class.
            Lets the system know that the InstallUtil.exe tool will be run against this assembly
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.Instrumentation.DataConfigurationFailureEvent">
            <summary>
            Represents the WMI event fired when an error in the configuration for the data access block is detected.
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Instrumentation.DataConfigurationFailureEvent.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Magic.Framework.Data.Instrumentation.DataConfigurationFailureEvent"/> class.
            </summary>
            <param name="instanceName">Name of the <see cref="T:Magic.Framework.Data.Database"/> instance the failure ocurred in.</param>
            <param name="exceptionMessage">The message that represents the exception thrown when the configuration error was detected.</param>
        </member>
        <member name="P:Magic.Framework.Data.Instrumentation.DataConfigurationFailureEvent.ExceptionMessage">
            <summary>
            Gets the message that represents the exception thrown when the configuration error was detected.
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.Configuration.IDatabaseAssembler">
            <summary>
            组装Database实例
            Represents the process to build an instance of a concrete <see cref="T:Magic.Framework.Data.Database"/> described by configuration information.
            </summary>
            <seealso cref="T:Magic.Framework.Data.DatabaseCustomFactory"/>
        </member>
        <member name="M:Magic.Framework.Data.Configuration.IDatabaseAssembler.Assemble(System.String,System.Configuration.ConnectionStringSettings,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Builds an instance of the concrete subtype of <see cref="T:Magic.Framework.Data.Database"/> the receiver knows how to build, based on 
            the provided connection string and any configuration information that might be contained by the 
            <paramref name="configurationSource"/>.
            </summary>
            <param name="name">The name for the new database instance.</param>
            <param name="connectionStringSettings">The connection string for the new database instance.</param>
            <param name="configurationSource">The source for any additional configuration information.</param>
            <returns>The new database instance.</returns>
        </member>
        <member name="T:Magic.Framework.Data.Configuration.Manageability.DatabaseBlockSetting">
            <summary>
            Represents the configuration information for the Database Application Block.
            </summary>
            <seealso cref="T:Magic.Framework.Data.Configuration.DatabaseSettings"/>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.Manageability.DatabaseBlockSetting.DefaultDatabase">
            <summary>
            Gets the name of the default database on the represented database configuration section.
            </summary>
            <seealso cref="P:Magic.Framework.Data.Configuration.DatabaseSettings.DefaultDatabase">DatabaseSettings.DefaultDatabase</seealso>
        </member>
        <member name="T:Magic.Framework.Data.TypeConvert.DoubleConvert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.DoubleConvert.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="customDbTypeValue"></param>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.DoubleConvert.GetValue(System.Data.IDataReader,System.Int32,System.Type)">
            <summary>
            <para>Get the value from <see cref="T:System.Data.IDataReader"/>, convert it to <paramref name="returnType"/></para>
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> that contains the data to be read.</param>
            <param name="index">The index of the field in <paramref name="IDataReader"/> that to be read.</param>
            <param name="returnType">The <see cref="T:System.Type"/> of the return value.</param>
            <returns>The value boxed with specific type.</returns>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.DoubleConvert.SetValue(System.Data.Common.DbParameter,Magic.Framework.Data.DbTypeInfo,System.Object)">
            <summary>
            Set the value to <see cref="T:System.Data.Common.DbParameter"/>
            </summary>
            <param name="parameter"></param>
            <param name="typeInfo"></param>
            <param name="value"></param>
        </member>
        <member name="T:Magic.Framework.Data.ConnectionString">
            <summary>
            ConnectionString class constructs a connection string by 
            inserting a username and password into a template.
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.ConnectionString.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Magic.Framework.Data.ConnectionString"/> with a connection string, the user ID tokens and password tokens.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="userIdTokens">The user id tokens that can be parsed out of the connection string.</param>
            <param name="passwordTokens">The password tokens that can be parsed out of the conection string.</param>
        </member>
        <member name="M:Magic.Framework.Data.ConnectionString.ToString">
            <devdoc>
            Gets the formatted connection string.
            </devdoc>        
        </member>
        <member name="M:Magic.Framework.Data.ConnectionString.ToStringNoCredentials">
            <devdoc>
            Gets the formatted connection string without the username and password.
            </devdoc>        
        </member>
        <member name="M:Magic.Framework.Data.ConnectionString.CreateNewConnectionString(System.String)">
            <summary>
            Formats a new connection string with a user ID and password.
            </summary>  
            <param name="connectionStringToFormat">
            The connection string to format.
            </param>		
        </member>
        <member name="P:Magic.Framework.Data.ConnectionString.UserName">
            <summary>
            Gets or sets the name of the user.
            </summary>
            <value>The name of the user.</value>
            <devdoc>
            Database username for the connection string.
            </devdoc>
        </member>
        <member name="P:Magic.Framework.Data.ConnectionString.Password">
            <devdoc>
            User password for the connection string.
            </devdoc>
        </member>
        <member name="T:Magic.Framework.Data.Oracle.Configuration.OracleConnectionData">
            <summary>
            Oracle-specific connection information.
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Oracle.Configuration.OracleConnectionData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Magic.Framework.Data.Oracle.Configuration.OracleConnectionData"/> class with default values.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Oracle.Configuration.OracleConnectionData.Packages">
            <summary>
            Gets a collection of <see cref="T:Magic.Framework.Data.Oracle.Configuration.OraclePackageData"/> objects.
            </summary>
            <value>
            A collection of <see cref="T:Magic.Framework.Data.Oracle.Configuration.OraclePackageData"/> objects.
            </value>
        </member>
        <member name="T:Magic.Framework.Data.TypeConvert.AnsiClobConvert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.AnsiClobConvert.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="customDbTypeValue"></param>
        </member>
        <member name="T:Magic.Framework.Data.Sql.SqlDialect">
            <summary>
            generic purpose dialect
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.IDialect">
            <summary>
            dialect interface for different databases
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.IDialect.ConfigDbParameter(System.Data.Common.DbParameter,Magic.Framework.Data.DbTypeInfo)">
            <summary>
            use the <paramref name="typeInfo"/> to config the parameter information
            </summary>
            <param name="param"><see cref="T:System.Data.Common.DbParameter"/> that to be configed</param>
            <param name="typeInfo"><see cref="T:Magic.Framework.Data.DbTypeInfo"/> that contains the parameter information</param>
        </member>
        <member name="M:Magic.Framework.Data.IDialect.ConfigDbParameter(System.Data.Common.DbParameter,Magic.Framework.Data.DbTypeInfo,System.Object)">
            <summary>
            use the <paramref name="typeInfo"/> to config the parameter information
            </summary>
            <param name="param"><see cref="T:System.Data.Common.DbParameter"/> that to be configed</param>
            <param name="typeInfo"><see cref="T:Magic.Framework.Data.DbTypeInfo"/> that contains the parameter information</param>
            <param name="value">The value of the parameter</param>
        </member>
        <member name="M:Magic.Framework.Data.IDialect.GetValue(System.Data.IDataReader,System.Int32,System.Type,Magic.Framework.Data.DbTypeInfo)">
            <summary>
            Read the field value from the <paramref name="reader"/>.
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <param name="returnType">The type of the return value.</param>
            <param name="typeInfo"><see cref="T:Magic.Framework.Data.DbTypeInfo"/> that contains the parameter information</param>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.IDialect.LogParameter(log4net.ILog,System.Data.IDataParameter)">
            <summary>
            Write the <paramref name="param"/> into log file, use the specific database's data type
            </summary>
            <param name="log">The <see cref="T:log4net.ILog"/>.</param>
            <param name="param">The <see cref="T:System.Data.IDataParameter"/> that need to be logged</param>
        </member>
        <member name="M:Magic.Framework.Data.IDialect.GetSequenceValSql(System.String)">
            <summary>
            
            </summary>
            <param name="sequenceName"></param>
            <returns></returns>
        </member>
        <member name="P:Magic.Framework.Data.IDialect.SequenceType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.IDialect.UserParametersStartIndex">
            <summary>
            Returns the starting index for parameters in a command.
            </summary>
            <returns>The starting index for parameters in a command.</returns>
        </member>
        <member name="P:Magic.Framework.Data.IDialect.ParameterToken">
            <summary>
            <para>Gets the parameter token used to delimit parameters for the database.</para>
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.IDialect.CustomDbParameterType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Sql.SqlDialect.ConfigDbParameter(System.Data.Common.DbParameter,Magic.Framework.Data.DbTypeInfo)">
            <summary>
            use the <paramref name="typeInfo"/> to config the parameter information
            </summary>
            <param name="param"><see cref="T:System.Data.Common.DbParameter"/> that to be configed</param>
            <param name="typeInfo"><see cref="T:Magic.Framework.Data.DbTypeInfo"/> that contains the parameter information</param>
        </member>
        <member name="M:Magic.Framework.Data.Sql.SqlDialect.ConfigDbParameter(System.Data.Common.DbParameter,Magic.Framework.Data.DbTypeInfo,System.Object)">
            <summary>
            use the <paramref name="typeInfo"/> to config the parameter information
            </summary>
            <param name="param"><see cref="T:System.Data.Common.DbParameter"/> that to be configed</param>
            <param name="typeInfo"><see cref="T:Magic.Framework.Data.DbTypeInfo"/> that contains the parameter information</param>
            <param name="value">The value of the parameter</param>
        </member>
        <member name="M:Magic.Framework.Data.Sql.SqlDialect.GetValue(System.Data.IDataReader,System.Int32,System.Type,Magic.Framework.Data.DbTypeInfo)">
            <summary>
            Read the field value from the <paramref name="reader"/>.
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <param name="returnType">The type of the return value.</param>
            <param name="typeInfo"><see cref="T:Magic.Framework.Data.DbTypeInfo"/> that contains the parameter information</param>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.Sql.SqlDialect.LogParameter(log4net.ILog,System.Data.IDataParameter)">
            <summary>
            Write the <paramref name="param"/> into log file, use the specific database's data type
            </summary>
            <param name="log">The <see cref="T:log4net.ILog"/>.</param>
            <param name="param">The <see cref="T:System.Data.IDataParameter"/> that need to be logged</param>
        </member>
        <member name="M:Magic.Framework.Data.Sql.SqlDialect.GetSequenceValSql(System.String)">
            <summary>
            
            </summary>
            <param name="sequenceName"></param>
            <returns></returns>
        </member>
        <member name="P:Magic.Framework.Data.Sql.SqlDialect.SequenceType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Sql.SqlDialect.UserParametersStartIndex">
            <summary>
            Returns the starting index for parameters in a command.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Sql.SqlDialect.ParameterToken">
            <summary>
            <para>Gets the parameter token used to delimit parameters for the database.</para>
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Sql.SqlDialect.CustomDbParameterType">
            <summary>
            <para>The <see cref="T:System.Type"/> of DbParameter in specific database provider, such as SqlParameter in SqlClient,
            OracleParameter in OracleClient, etc.
            </para>
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.Generic.GenericDatabase">
            <summary>
            The <see cref="T:Magic.Framework.Data.Generic.GenericDatabase"/> is used when no specific behavior is required or known for a database.
            </summary>
            <remarks>
            This database exposes the <see cref="T:System.Data.Common.DbProviderFactory"/> used to allow for a provider 
            agnostic programming model.
            </remarks>
        </member>
        <member name="M:Magic.Framework.Data.Generic.GenericDatabase.#ctor(System.String,System.Data.Common.DbProviderFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Magic.Framework.Data.Generic.GenericDatabase"/> class with a connection string and 
            a provider factory.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="dbProviderFactory">The provider factory.</param>
        </member>
        <member name="M:Magic.Framework.Data.Generic.GenericDatabase.DeriveParameters(System.Data.IDbCommand)">
            <summary>
            This operation is not supported in this class.
            </summary>
            <param name="discoveryCommand">The <see cref="T:System.Data.Common.DbCommand"/> to do the discovery.</param>
            <remarks>There is no generic way to do it, the operation is not implemented for <see cref="T:Magic.Framework.Data.Generic.GenericDatabase"/>.</remarks>
            <exception cref="T:System.NotSupportedException">Thrown whenever this method is called.</exception>
        </member>
        <member name="T:Magic.Framework.Data.MySql.MySqlDatabaseAssembler">
            <summary>
            Represents the process to build an instance of <see cref="T:Magic.Framework.Data.MySql.MySqlDatabase"/> described by configuration information.
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.MySql.MySqlDatabaseAssembler.Assemble(System.String,System.Configuration.ConnectionStringSettings,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Builds an instance of <see cref="T:Magic.Framework.Data.MySql.MySqlDatabase"/>, based on the provided connection string.
            </summary>
            <param name="name">The name for the new database instance.</param>
            <param name="connectionStringSettings">The connection string for the new database instance.</param>
            <param name="configurationSource">The source for any additional configuration information.</param>
            <returns>The new mysql database instance.</returns>
        </member>
        <member name="T:Magic.Framework.Data.Instrumentation.DataInstrumentationProvider">
            <summary>
            Defines the logical events that can be instrumented for <see cref="T:Magic.Framework.Data.Database"/> objects.
            </summary>
            <remarks>
            The concrete instrumentation is provided by an object bound to the events of the provider. 
            The default listener, automatically bound during construction, is <see cref="T:Magic.Framework.Data.Instrumentation.DataInstrumentationListener"/>.
            </remarks>
        </member>
        <member name="M:Magic.Framework.Data.Instrumentation.DataInstrumentationProvider.FireCommandExecutedEvent(System.DateTime)">
            <summary>
            Fires the <see cref="E:Magic.Framework.Data.Instrumentation.DataInstrumentationProvider.commandExecuted"/> event.
            </summary>
            <param name="startTime">The time the command started its execution.</param>
        </member>
        <member name="M:Magic.Framework.Data.Instrumentation.DataInstrumentationProvider.FireCommandFailedEvent(System.String,System.String,System.Exception)">
            <summary>
            Fires the <see cref="E:Magic.Framework.Data.Instrumentation.DataInstrumentationProvider.commandFailed"/> event.
            </summary>
            <param name="commandText">The text of the command that failed its execution.</param>
            <param name="connectionString">The connection string of the <see cref="T:Magic.Framework.Data.Database"/> that executed the failed command, with credentials removed.</param>
            <param name="exception">The exception thrown when the command failed.</param>
        </member>
        <member name="M:Magic.Framework.Data.Instrumentation.DataInstrumentationProvider.FireConnectionOpenedEvent">
            <summary>
            Fires the <see cref="E:Magic.Framework.Data.Instrumentation.DataInstrumentationProvider.connectionOpened"/> event.
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Instrumentation.DataInstrumentationProvider.FireConnectionFailedEvent(System.String,System.Exception)">
            <summary>
            Fires the <see cref="E:Magic.Framework.Data.Instrumentation.DataInstrumentationProvider.connectionFailed"/> event.
            </summary>
            <param name="connectionString">The connection string that caused the failed connection, with credentials removed.</param>
            <param name="exception">The exception thrown when the connection failed.</param>
        </member>
        <member name="E:Magic.Framework.Data.Instrumentation.DataInstrumentationProvider.connectionOpened">
            <summary>
            Occurs when a new database connection is opened by a <see cref="T:Magic.Framework.Data.Database"/> instance.
            </summary>
        </member>
        <member name="E:Magic.Framework.Data.Instrumentation.DataInstrumentationProvider.connectionFailed">
            <summary>
            Occurs when the attempt to open a new database connection by a <see cref="T:Magic.Framework.Data.Database"/> instance fails.
            </summary>
        </member>
        <member name="E:Magic.Framework.Data.Instrumentation.DataInstrumentationProvider.commandExecuted">
            <summary>
            Occurs when a database command is executed by a <see cref="T:Magic.Framework.Data.Database"/> instance.
            </summary>
        </member>
        <member name="E:Magic.Framework.Data.Instrumentation.DataInstrumentationProvider.commandFailed">
            <summary>
            Occurs when the attempt to execute a database command by a <see cref="T:Magic.Framework.Data.Database"/> instance fails.
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.StdDbType">
            <summary>
            Standard database data type
            </summary>
        </member>
        <member name="F:Magic.Framework.Data.StdDbType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Magic.Framework.Data.StdDbType.Bool">
            <summary>
            boolean
            </summary>
        </member>
        <member name="F:Magic.Framework.Data.StdDbType.UByte">
            <summary>
            8 bit unsigned integer value
            </summary>
        </member>
        <member name="F:Magic.Framework.Data.StdDbType.Byte">
            <summary>
            8 bit signed integer value
            </summary>
        </member>
        <member name="F:Magic.Framework.Data.StdDbType.UInt16">
            <summary>
            16 bit unsigned integer value
            </summary>
        </member>
        <member name="F:Magic.Framework.Data.StdDbType.UInt32">
            <summary>
            32 bit unsigned integer value
            </summary>
        </member>
        <member name="F:Magic.Framework.Data.StdDbType.UInt64">
            <summary>
            64 bit unsigned integer value
            </summary>
        </member>
        <member name="F:Magic.Framework.Data.StdDbType.Int16">
            <summary>
            16 bit signed integer value
            </summary>
        </member>
        <member name="F:Magic.Framework.Data.StdDbType.Int32">
            <summary>
            32 bit signed integer value
            </summary>
        </member>
        <member name="F:Magic.Framework.Data.StdDbType.Int64">
            <summary>
            64 bit signed integer value
            </summary>
        </member>
        <member name="F:Magic.Framework.Data.StdDbType.Number">
            <summary>
            Oracle number, SQL Server decimal, etc. 
            </summary>
        </member>
        <member name="F:Magic.Framework.Data.StdDbType.Float">
            <summary>
            A 32-bit, 7 precision floating point number, with the range of ±1.5 × 10−45 to ±3.4 × 1038
            </summary>
        </member>
        <member name="F:Magic.Framework.Data.StdDbType.Double">
            <summary>
            A 64-bit, 15-16 precision floating point number, with the range of -1.79E +308~1.79E +308 
            </summary>
        </member>
        <member name="F:Magic.Framework.Data.StdDbType.Single">
            <summary>
            A 32-bit, single-precision floating point number, with the range of -3.40E +38~3.40E +38
            </summary>
        </member>
        <member name="F:Magic.Framework.Data.StdDbType.Date">
            <summary>
            date
            </summary>
        </member>
        <member name="F:Magic.Framework.Data.StdDbType.DateTime">
            <summary>
            date time
            </summary>
        </member>
        <member name="F:Magic.Framework.Data.StdDbType.AnsiChar">
            <summary>
            Fixed length
            </summary>
        </member>
        <member name="F:Magic.Framework.Data.StdDbType.UnicodeChar">
            <summary>
            Fixed length
            </summary>
        </member>
        <member name="F:Magic.Framework.Data.StdDbType.AnsiString">
            <summary>
            ansi string, variant length
            </summary>
        </member>
        <member name="F:Magic.Framework.Data.StdDbType.UnicodeString">
            <summary>
            unicode string, variant length
            </summary>
        </member>
        <member name="F:Magic.Framework.Data.StdDbType.AnsiClob">
            <summary>
            ansi long text
            </summary>
        </member>
        <member name="F:Magic.Framework.Data.StdDbType.UnicodeClob">
            <summary>
            unicode long text
            </summary>
        </member>
        <member name="F:Magic.Framework.Data.StdDbType.Binary">
            <summary>
            binary data
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.Oracle.OracleDialect">
            <summary>
            generic purpose dialect
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Oracle.OracleDialect.ConfigDbParameter(System.Data.Common.DbParameter,Magic.Framework.Data.DbTypeInfo)">
            <summary>
            use the <paramref name="typeInfo"/> to config the parameter information
            </summary>
            <param name="param"><see cref="T:System.Data.Common.DbParameter"/> that to be configed</param>
            <param name="typeInfo"><see cref="T:Magic.Framework.Data.DbTypeInfo"/> that contains the parameter information</param>
        </member>
        <member name="M:Magic.Framework.Data.Oracle.OracleDialect.ConfigDbParameter(System.Data.Common.DbParameter,Magic.Framework.Data.DbTypeInfo,System.Object)">
            <summary>
            use the <paramref name="typeInfo"/> to config the parameter information
            </summary>
            <param name="param"><see cref="T:System.Data.Common.DbParameter"/> that to be configed</param>
            <param name="typeInfo"><see cref="T:Magic.Framework.Data.DbTypeInfo"/> that contains the parameter information</param>
            <param name="value">The value of the parameter</param>
        </member>
        <member name="M:Magic.Framework.Data.Oracle.OracleDialect.GetValue(System.Data.IDataReader,System.Int32,System.Type,Magic.Framework.Data.DbTypeInfo)">
            <summary>
            Read the field value from the <paramref name="reader"/>.
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <param name="returnType">The type of the return value.</param>
            <param name="typeInfo"><see cref="T:Magic.Framework.Data.DbTypeInfo"/> that contains the parameter information</param>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.Oracle.OracleDialect.LogParameter(log4net.ILog,System.Data.IDataParameter)">
            <summary>
            Write the <paramref name="param"/> into log file, use the specific database's data type
            </summary>
            <param name="log">The <see cref="T:log4net.ILog"/>.</param>
            <param name="param">The <see cref="T:System.Data.IDataParameter"/> that need to be logged</param>
        </member>
        <member name="M:Magic.Framework.Data.Oracle.OracleDialect.GetSequenceValSql(System.String)">
            <summary>
            
            </summary>
            <param name="sequenceName"></param>
            <returns></returns>
        </member>
        <member name="P:Magic.Framework.Data.Oracle.OracleDialect.SequenceType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Oracle.OracleDialect.UserParametersStartIndex">
            <summary>
            Returns the starting index for parameters in a command.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Oracle.OracleDialect.ParameterToken">
            <summary>
            <para>Gets the parameter token used to delimit parameters for the database.</para>
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Oracle.OracleDialect.CustomDbParameterType">
            <summary>
            <para>The <see cref="T:System.Type"/> of DbParameter in specific database provider, such as SqlParameter in SqlClient,
            OracleParameter in OracleClient, etc.
            </para>
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.DatabaseMapper">
            <summary>
            This type supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Resolves default names for databases.
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.DatabaseMapper.MapName(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Returns the default database name from the configuration in the <paramref name="configSource"/>, if the
            value for <paramref name="name"/> is <see langword="null"/> (<b>Nothing</b> in Visual Basic).
            </summary>
            <param name="name">The current name.</param>
            <param name="configSource">The source for configuration information.</param>
            <returns>The default database name if <paramref name="name"/> is <see langword="null"/> (<b>Nothing</b> in Visual Basic),
            otherwise the original value for <b>name</b>.</returns>
        </member>
        <member name="T:Magic.Framework.Data.Oracle.Configuration.OraclePackageData">
            <summary>
            <para>Represents the package information to use when calling a stored procedure for Oracle.</para>
            </summary>
            <remarks>
            <para>
            A package name can be appended to the stored procedure name of a command if the prefix of the stored procedure
            matchs the prefix defined. This allows the caller of the stored procedure to use stored procedures
            in a more database independent fashion.
            </para>
            </remarks>
        </member>
        <member name="T:Magic.Framework.Data.Oracle.IOraclePackage">
            <summary>
            Represents the description of an oracle package mapping.
            </summary>
            <remarks>
            <see cref="T:Magic.Framework.Data.Oracle.IOraclePackage"/> is used to specify how to transform store procedure names 
            into package qualified Oracle stored procedure names.
            </remarks>
            <seealso cref="T:Magic.Framework.Data.Oracle.OracleDatabase"/>
        </member>
        <member name="P:Magic.Framework.Data.Oracle.IOraclePackage.Name">
            <summary>
            When implemented by a class, gets the name of the package.
            </summary>
            <value>
            The name of the package.
            </value>
        </member>
        <member name="P:Magic.Framework.Data.Oracle.IOraclePackage.Prefix">
            <summary>
            When implemented by a class, gets the prefix for the package.
            </summary>
            <value>
            The prefix for the package.
            </value>
        </member>
        <member name="M:Magic.Framework.Data.Oracle.Configuration.OraclePackageData.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Magic.Framework.Data.Oracle.Configuration.OraclePackageData"/> class.</para>
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Oracle.Configuration.OraclePackageData.#ctor(System.String,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Magic.Framework.Data.Oracle.Configuration.OraclePackageData"/> class, given the prefix to search for and the name of the package.</para>
            </summary>
            <param name="name">
            <para>The name of the package to append to any found procedure that has the <paramref name="prefix"/>.</para>
            </param>
            <param name="prefix">
            <para>The prefix of the stored procedures used in this package.</para>
            </param>
        </member>
        <member name="P:Magic.Framework.Data.Oracle.Configuration.OraclePackageData.Prefix">
            <summary>
            <para>Gets or sets the prefix of the stored procedures that are in the package in Oracle.</para>
            </summary>
            <value>
            <para>The prefix of the stored procedures that are in the package in Oracle.</para>
            </value>
        </member>
        <member name="T:Magic.Framework.Data.Instrumentation.DefaultDataEventLoggerCustomFactory">
            <summary>
            This type supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Represents the process to build a <see cref="T:Magic.Framework.Data.Instrumentation.DefaultDataEventLogger"/> according to instrumentation configuration.
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Instrumentation.DefaultDataEventLoggerCustomFactory.DoCreateObject(Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Builds a <see cref="T:Magic.Framework.Data.Instrumentation.DefaultDataEventLogger"/>.
            </summary>
            <param name="instrumentationConfigurationSection">The instrumentation section that is used as configuration.</param>
            <returns>A fully initialized instance of <see cref="T:Magic.Framework.Data.Instrumentation.DefaultDataEventLogger"/>.</returns>
        </member>
        <member name="T:Magic.Framework.Data.SequenceType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Magic.Framework.Data.SequenceType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Magic.Framework.Data.SequenceType.SelectBeforeInsert">
            <summary>
            
            </summary>
        </member>
        <member name="F:Magic.Framework.Data.SequenceType.SelectAfterInsert">
            <summary>
            
            </summary>
        </member>
        <member name="F:Magic.Framework.Data.SequenceType.SelectWhenInsert">
            <summary>
            
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.Configuration.DatabaseAssemblerAttribute">
            <summary>
            Specifies what type to use to build the concrete <see cref="T:Magic.Framework.Data.Database"/> type this attribute is bound to. 
            This class cannot be inherited.
            </summary>
            <remarks>
            This attribute is used by the <see cref="T:Magic.Framework.Data.DatabaseCustomFactory"/> once the <see cref="T:Magic.Framework.Data.Database"/> type to build is 
            known based on the configuration information to determine how to build the actual <b>Database</b> instance.
            </remarks>
        </member>
        <member name="M:Magic.Framework.Data.Configuration.DatabaseAssemblerAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Magic.Framework.Data.Configuration.DatabaseAssemblerAttribute"/> class with an assembler type.
            </summary>
            <param name="assemblerType">The assembler type. Must implement the <see cref="T:Magic.Framework.Data.Configuration.IDatabaseAssembler"/> interface.</param>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.DatabaseAssemblerAttribute.AssemblerType">
            <summary>
            Gets the database assembler type.
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.TypeConvert.UIntConvert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.UIntConvert.#ctor(Magic.Framework.Data.StdDbType,System.Int32)">
            <summary>
            
            </summary>
            <param name="stdDbType"></param>
            <param name="customDbTypeValue"></param>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.UIntConvert.GetValue(System.Data.IDataReader,System.Int32,System.Type)">
            <summary>
            <para>Get the value from <see cref="T:System.Data.IDataReader"/>, convert it to <paramref name="returnType"/></para>
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> that contains the data to be read.</param>
            <param name="index">The index of the field in <paramref name="IDataReader"/> that to be read.</param>
            <param name="returnType">The <see cref="T:System.Type"/> of the return value.</param>
            <returns>The value boxed with specific type.</returns>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.UIntConvert.SetValue(System.Data.Common.DbParameter,Magic.Framework.Data.DbTypeInfo,System.Object)">
            <summary>
            Set the value to <see cref="T:System.Data.Common.DbParameter"/>
            </summary>
            <param name="parameter"></param>
            <param name="typeInfo"></param>
            <param name="value"></param>
        </member>
        <member name="T:Magic.Framework.Data.TypeConvert.UInt32Convert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.UInt32Convert.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="customDbTypeValue"></param>
        </member>
        <member name="T:Magic.Framework.Data.TypeConvert.BinaryConvert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.BinaryConvert.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="customDbTypeValue"></param>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.BinaryConvert.GetValue(System.Data.IDataReader,System.Int32,System.Type)">
            <summary>
            <para>Get the value from <see cref="T:System.Data.IDataReader"/>, convert it to <paramref name="returnType"/></para>
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> that contains the data to be read.</param>
            <param name="index">The index of the field in <paramref name="IDataReader"/> that to be read.</param>
            <param name="returnType">The <see cref="T:System.Type"/> of the return value.</param>
            <returns>The value boxed with specific type.</returns>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.BinaryConvert.SetValue(System.Data.Common.DbParameter,Magic.Framework.Data.DbTypeInfo,System.Object)">
            <summary>
            Set the value to <see cref="T:System.Data.Common.DbParameter"/>
            </summary>
            <param name="parameter"></param>
            <param name="typeInfo"></param>
            <param name="value"></param>
        </member>
        <member name="T:Magic.Framework.Data.TypeConvert.BoolConvert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.BoolConvert.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="customDbTypeValue"></param>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.BoolConvert.GetValue(System.Data.IDataReader,System.Int32,System.Type)">
            <summary>
            <para>Get the value from <see cref="T:System.Data.IDataReader"/>, convert it to <paramref name="returnType"/></para>
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> that contains the data to be read.</param>
            <param name="index">The index of the field in <paramref name="IDataReader"/> that to be read.</param>
            <param name="returnType">The <see cref="T:System.Type"/> of the return value.</param>
            <returns>The value boxed with specific type.</returns>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.BoolConvert.SetValue(System.Data.Common.DbParameter,Magic.Framework.Data.DbTypeInfo,System.Object)">
            <summary>
            Set the value to <see cref="T:System.Data.Common.DbParameter"/>
            </summary>
            <param name="parameter"></param>
            <param name="typeInfo"></param>
            <param name="value"></param>
        </member>
        <member name="T:Magic.Framework.Data.Instrumentation.CommandExecutedEventArgs">
            <summary>
            Provides data for the <see cref="E:Magic.Framework.Data.Instrumentation.DataInstrumentationProvider.commandExecuted"/> event.
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Instrumentation.CommandExecutedEventArgs.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Magic.Framework.Data.Instrumentation.CommandExecutedEventArgs"/> class.
            </summary>
            <param name="startTime">The time the command started its execution.</param>
        </member>
        <member name="P:Magic.Framework.Data.Instrumentation.CommandExecutedEventArgs.StartTime">
            <summary>
            Gets the time the command started its execution.
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.CachingMechanism">
            <devdoc>
            CachingMechanism provides caching support for stored procedure 
            parameter discovery and caching
            </devdoc>
        </member>
        <member name="M:Magic.Framework.Data.CachingMechanism.CloneParameters(System.Data.IDataParameter[])">
            <devdoc>
            Create and return a copy of the IDataParameter array.
            </devdoc>        
        </member>
        <member name="M:Magic.Framework.Data.CachingMechanism.Clear">
            <devdoc>
            Empties all items from the cache
            </devdoc>
        </member>
        <member name="M:Magic.Framework.Data.CachingMechanism.AddParameterSetToCache(System.String,System.Data.IDbCommand,System.Data.IDataParameter[])">
            <devdoc>
            Add a parameter array to the cache for the command.
            </devdoc>        
        </member>
        <member name="M:Magic.Framework.Data.CachingMechanism.GetCachedParameterSet(System.String,System.Data.IDbCommand)">
            <devdoc>
            Gets a parameter array from the cache for the command. Returns null if no parameters are found.
            </devdoc>        
        </member>
        <member name="M:Magic.Framework.Data.CachingMechanism.IsParameterSetCached(System.String,System.Data.IDbCommand)">
            <devdoc>
            Gets if a given stored procedure on a specific connection string has a cached parameter set
            </devdoc>        
        </member>
        <member name="T:Magic.Framework.Data.TypeConvert.UnicodeCharConvert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.UnicodeCharConvert.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="customDbTypeValue"></param>
        </member>
        <member name="T:Magic.Framework.Data.TypeConvert.ByteConvert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.ByteConvert.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="customDbTypeValue"></param>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.ByteConvert.GetValue(System.Data.IDataReader,System.Int32,System.Type)">
            <summary>
            <para>Get the value from <see cref="T:System.Data.IDataReader"/>, convert it to <paramref name="returnType"/></para>
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> that contains the data to be read.</param>
            <param name="index">The index of the field in <paramref name="IDataReader"/> that to be read.</param>
            <param name="returnType">The <see cref="T:System.Type"/> of the return value.</param>
            <returns>The value boxed with specific type.</returns>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.ByteConvert.SetValue(System.Data.Common.DbParameter,Magic.Framework.Data.DbTypeInfo,System.Object)">
            <summary>
            Set the value to <see cref="T:System.Data.Common.DbParameter"/>
            </summary>
            <param name="parameter"></param>
            <param name="typeInfo"></param>
            <param name="value"></param>
        </member>
        <member name="T:Magic.Framework.Data.StdParameter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.StdParameter.#ctor(System.String,Magic.Framework.Data.DbTypeInfo,System.Object)">
            <summary>
            create a standard database parameter
            </summary>
            <param name="name">parameter name</param>
            <param name="typeInfo">parameter data type information</param>
            <param name="value">parameter value</param>
        </member>
        <member name="M:Magic.Framework.Data.StdParameter.#ctor(System.String,Magic.Framework.Data.DbTypeInfo,System.Object,System.Data.ParameterDirection,System.Boolean)">
            <summary>
            create a standard database parameter
            </summary>
            <param name="name">parameter name</param>
            <param name="typeInfo">parameter data type information</param>
            <param name="value">parameter value</param>
            <param name="direction"></param>
            <param name="nullable"></param>
        </member>
        <member name="P:Magic.Framework.Data.StdParameter.Name">
            <summary>
            parameter name
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.StdParameter.TypeInfo">
            <summary>
            field type/parameter information
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.StdParameter.Value">
            <summary>
            parameter value
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.StdParameter.Direction">
            <summary>
            parameter direction
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.StdParameter.Nullable">
            <summary>
            is nullable
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.Sql.SqlDatabase">
            <summary>
            <para>Represents a SQL Server database.</para>
            </summary>
            <remarks> 
            <para>
            Internally uses SQL Server .NET Managed Provider from Microsoft (System.Data.SqlClient) to connect to the database.
            </para>  
            </remarks>
        </member>
        <member name="M:Magic.Framework.Data.Sql.SqlDatabase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Magic.Framework.Data.Sql.SqlDatabase"/> class with a connection string.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:Magic.Framework.Data.Sql.SqlDatabase.DeriveParameters(System.Data.IDbCommand)">
            <summary>
            Retrieves parameter information from the stored procedure specified in the <see cref="T:System.Data.Common.DbCommand"/> and populates the Parameters collection of the specified <see cref="T:System.Data.Common.DbCommand"/> object. 
            </summary>
            <param name="discoveryCommand">The <see cref="T:System.Data.Common.DbCommand"/> to do the discovery.</param>
            <remarks>The <see cref="T:System.Data.Common.DbCommand"/> must be a <see cref="T:System.Data.SqlClient.SqlCommand"/> instance.</remarks>
        </member>
        <member name="M:Magic.Framework.Data.Sql.SqlDatabase.SameNumberOfParametersAndValues(System.Data.IDbCommand,System.Object[])">
            <summary>
            Determines if the number of parameters in the command matches the array of parameter values.
            </summary>
            <param name="command">The <see cref="T:System.Data.Common.DbCommand"/> containing the parameters.</param>
            <param name="values">The array of parameter values.</param>
            <returns><see langword="true"/> if the number of parameters and values match; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Magic.Framework.Data.MySql.MySqlDialect">
            <summary>
            generic purpose dialect
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.MySql.MySqlDialect.ConfigDbParameter(System.Data.Common.DbParameter,Magic.Framework.Data.DbTypeInfo)">
            <summary>
            use the <paramref name="typeInfo"/> to config the parameter information
            </summary>
            <param name="param"><see cref="T:System.Data.Common.DbParameter"/> that to be configed</param>
            <param name="typeInfo"><see cref="T:Magic.Framework.Data.DbTypeInfo"/> that contains the parameter information</param>
        </member>
        <member name="M:Magic.Framework.Data.MySql.MySqlDialect.ConfigDbParameter(System.Data.Common.DbParameter,Magic.Framework.Data.DbTypeInfo,System.Object)">
            <summary>
            use the <paramref name="typeInfo"/> to config the parameter information
            </summary>
            <param name="param"><see cref="T:System.Data.Common.DbParameter"/> that to be configed</param>
            <param name="typeInfo"><see cref="T:Magic.Framework.Data.DbTypeInfo"/> that contains the parameter information</param>
            <param name="value">The value of the parameter</param>
        </member>
        <member name="M:Magic.Framework.Data.MySql.MySqlDialect.GetValue(System.Data.IDataReader,System.Int32,System.Type,Magic.Framework.Data.DbTypeInfo)">
            <summary>
            Read the field value from the <paramref name="reader"/>.
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <param name="returnType">The type of the return value.</param>
            <param name="typeInfo"><see cref="T:Magic.Framework.Data.DbTypeInfo"/> that contains the parameter information</param>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.MySql.MySqlDialect.LogParameter(log4net.ILog,System.Data.IDataParameter)">
            <summary>
            Write the <paramref name="param"/> into log file, use the specific database's data type
            </summary>
            <param name="log">The <see cref="T:log4net.ILog"/>.</param>
            <param name="param">The <see cref="T:System.Data.IDataParameter"/> that need to be logged</param>
        </member>
        <member name="M:Magic.Framework.Data.MySql.MySqlDialect.GetSequenceValSql(System.String)">
            <summary>
            
            </summary>
            <param name="sequenceName"></param>
            <returns></returns>
        </member>
        <member name="P:Magic.Framework.Data.MySql.MySqlDialect.SequenceType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.MySql.MySqlDialect.UserParametersStartIndex">
            <summary>
            Returns the starting index for parameters in a command.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.MySql.MySqlDialect.ParameterToken">
            <summary>
            <para>Gets the parameter token used to delimit parameters for the database.</para>
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.MySql.MySqlDialect.CustomDbParameterType">
            <summary>
            <para>The <see cref="T:System.Type"/> of DbParameter in specific database provider, such as SqlParameter in SqlClient,
            OracleParameter in OracleClient, etc.
            </para>
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.DbSession">
            <summary>
            
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.Open">
            <summary>
            open the database connection for executing commands
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.Close">
            <summary>
            close the database connection
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.Dispose">
            <summary>
            release database connection
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.BeginTrans">
            <summary>
            begin a database transaction
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.BeginTrans(System.Data.IsolationLevel)">
            <summary>
            begin a database transaction with specific <see cref="T:System.Data.IsolationLevel"/>
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.CommitTrans">
            <summary>
            commit current transaction
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.RollbackTrans">
            <summary>
            rollback current transaction
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.GetSequenceValue(System.String)">
            <summary>
            <para>Get the Oracle sequnce or Sql Server/MySql indentity value</para>
            <para>When using Sql Server, this method must be called just after inserting a record into a table that contains an identity column, 
            and within the same transaction with the insert command.</para>
            </summary>
            <param name="sequenceName">The sequence name is essential for oracle, and optional for Sql Server and MySql.</param>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.ProcessSequence(System.Data.IDbCommand,System.String)">
            <summary>
            ugly sql server identity functions(@@identity will affected by triggers, scope_identity()只有在与insert语句同一个batch里面才能返回
            </summary>
            <param name="command"></param>
            <param name="sequenceName"></param>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.GetValue(System.Data.IDataReader,System.Int32,System.Type,Magic.Framework.Data.DbTypeInfo)">
            <summary>
            Read the field value from the <paramref name="reader"/>.
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <param name="returnType">The type of the return value.</param>
            <param name="typeInfo"><see cref="T:Magic.Framework.Data.DbTypeInfo"/> that contains the parameter information</param>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.CreateCommand">
            <summary>
            <para>Creates an <see cref="T:System.Data.IDbCommand"/>.</para>
            </summary>
            <returns><para>The <see cref="T:System.Data.IDbCommand"/>.</para></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.CreateSqlStringCommand(System.String)">
            <summary>
            <para>Creates an <see cref="T:System.Data.IDbCommand"/> to execute a SQL Query.</para>
            </summary>
            <param name="sql">SQL text</param>
            <returns>An <see cref="T:System.Data.IDbCommand"/></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.CreateStoredProcCommand(System.String)">
            <summary>
            <para>Creates an <see cref="T:System.Data.IDbCommand"/> to execute a stored procedure.</para>
            </summary>
            <param name="storedProcedureName"><para>The name of the stored procedure.</para></param>
            <returns><para>The <see cref="T:System.Data.IDbCommand"/> for the stored procedure.</para></returns>       
        </member>
        <member name="M:Magic.Framework.Data.DbSession.CreateStoredProcCommand(System.String,System.Object[])">
            <summary>
            <para>Creates an <see cref="T:System.Data.IDbCommand"/> to execute a stored procedure.</para>
            </summary>
            <param name="storedProcedureName"><para>The name of the stored procedure.</para></param>
            /// <param name="parameterValues"><para></para></param>
            <returns><para>The <see cref="T:System.Data.IDbCommand"/> for the stored procedure.</para></returns>       
        </member>
        <member name="M:Magic.Framework.Data.DbSession.BuildParameterName(System.String)">
            <summary>
            Builds a parameter name for the current database, the <paramref name="name"/> can not include the parameter token specific to a database.
            </summary>
            <param name="name">The name of the parameter.</param>
            <returns>A correctly formated parameter name.</returns>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.AddParameter(System.Data.IDbCommand,System.String,Magic.Framework.Data.DbTypeInfo,System.Object)">
            <summary>
            Add a <see cref="T:System.Data.Common.DbParameter"/> to the <paramref name="command"/>
            </summary>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> that <see cref="T:System.Data.Common.DbParameter"/> will be added to</param>
            <param name="parameterName">The parameter name</param>
            <param name="parammeterInfo">The parameter data type information</param>
            <param name="parameterValue">The parameter value</param>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.ExecuteDataSet(System.Data.IDbCommand,System.Int32)">
            <summary>
            <para>Execute the <paramref name="command"/> and return a dataset</para>
            </summary>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to be executed</param>
            <param name="commandTimeout">The time in seconds to wait for the command to execute. The default is 30 seconds.</param>
            <returns>A <see cref="T:System.Data.DataSet"/></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.ExecuteDataSet(System.Data.IDbCommand)">
            <summary>
            <para>Execute the <paramref name="command"/> and return a dataset</para>
            </summary>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to be executed</param>
            <returns>A <see cref="T:System.Data.DataSet"/></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.ExecuteDataSet(System.String)">
            <summary>
            <para>Execute the SQL Query and return a dataset</para>
            </summary>
            <param name="sql">SQL text</param>
            <returns>A <see cref="T:System.Data.DataSet"/></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.ExecuteDataSet(System.String,System.String[],Magic.Framework.Data.DbTypeInfo[],System.Object[])">
            <summary>
            <para>Execute the SQL Query and return a dataset</para>
            </summary>
            <param name="sql">SQL text</param>
            <param name="paramName">An array of paramters' name</param>
            <param name="paramInfo">An array of paramters' data type information</param>
            <param name="paramValue">An array of paramters' value</param>
            <returns>A <see cref="T:System.Data.DataSet"/></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.ExecuteDataSet(System.String,Magic.Framework.Data.StdParameter[])">
            <summary>
            <para>Execute the SQL Query and return a dataset</para>
            </summary>
            <param name="sql">SQL text</param>
            <param name="stdParameters">An array of <see cref="T:Magic.Framework.Data.StdParameter"/> that contains the parameter list</param>
            <returns>A <see cref="T:System.Data.DataSet"/></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.ExecuteDataSetForProc(System.String)">
            <summary>
            <para>Execute the Stored Procedure and return a dataset</para>
            </summary>
            <param name="storedProcedureName">Stored procedure name.</param>
            <returns>A <see cref="T:System.Data.DataSet"/></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.ExecuteDataSetForProc(System.String,System.Object[])">
            <summary>
            <para>Execute the Stored Procedure and return a dataset</para>
            </summary>
            <param name="storedProcedureName">Stored procedure name.</param>
            <param name="parameterValues">
            <para>An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>A <see cref="T:System.Data.DataSet"/></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.ExecuteScalar(System.Data.IDbCommand,System.Int32)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns the first column of the first row in the result set returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to be executed</param>
            <param name="commandTimeout">The time in seconds to wait for the command to execute. The default is 30 seconds.</param>
            <returns>
            <para>The first column of the first row in the result set.</para>
            </returns>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.ExecuteScalar(System.Data.IDbCommand)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns the first column of the first row in the result set returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to be executed</param>
            <returns>
            <para>The first column of the first row in the result set.</para>
            </returns>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.ExecuteScalar(System.String)">
            <summary>
            <para>Executes the SQL text and returns the first column of the first row in the result set returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="sql">SQL text</param>
            <returns>
            <para>The first column of the first row in the result set.</para>
            </returns>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.ExecuteScalar(System.String,System.String[],Magic.Framework.Data.DbTypeInfo[],System.Object[])">
            <summary>
            <para>Executes the SQL text and returns the first column of the first row in the result set returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="sql">SQL text</param>
            <param name="paramName">An array of paramters' name</param>
            <param name="paramInfo">An array of paramters' data type information</param>
            <param name="paramValue">An array of paramters' value</param>
            <returns>
            <para>The first column of the first row in the result set.</para>
            </returns>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.ExecuteScalar(System.String,Magic.Framework.Data.StdParameter[])">
            <summary>
            <para>Executes the SQL text and returns the first column of the first row in the result set returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="sql">SQL text</param>
            <param name="stdParameters">An array of <see cref="T:Magic.Framework.Data.StdParameter"/> that contains the parameter list</param>
            <returns>
            <para>The first column of the first row in the result set.</para>
            </returns>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.ExecuteScalarForProc(System.String)">
            <summary>
            <para>Executes the Stored Procedure and returns the first column of the first row in the result set returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="storedProcedureName">Stored procedure name.</param>
            <returns>
            <para>The first column of the first row in the result set.</para>
            </returns>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.ExecuteScalarForProc(System.String,System.Object[])">
            <summary>
            <para>Executes the Stored Procedure and returns the first column of the first row in the result set returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="storedProcedureName">Stored procedure name.</param>
            <param name="parameterValues">
            <para>An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>The first column of the first row in the result set.</para>
            </returns>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.ExecuteNonQuery(System.Data.IDbCommand,System.Int32)">
            <summary>
            <para>Execute the <paramref name="command"/> and return the quantity of rows affected</para>
            </summary>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to be executed</param>
            <param name="commandTimeout">The time in seconds to wait for the command to execute. The default is 30 seconds.</param>
            <returns>The quantity of rows affected.</returns>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.ExecuteNonQuery(System.Data.IDbCommand)">
            <summary>
            <para>Execute the <paramref name="command"/> and return  the quantity of rows affected</para>
            </summary>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to be executed</param>
            <returns>The quantity of rows affected.</returns>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.ExecuteNonQuery(System.String)">
            <summary>
            <para>Execute the SQL Query and return  the quantity of rows affected</para>
            </summary>
            <param name="sql">SQL text</param>
            <returns>The quantity of rows affected.</returns>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.ExecuteNonQuery(System.String,System.String[],Magic.Framework.Data.DbTypeInfo[],System.Object[])">
            <summary>
            <para>Execute the SQL Query and return  the quantity of rows affected</para>
            </summary>
            <param name="sql">SQL text</param>
            <param name="paramName">An array of paramters' name</param>
            <param name="paramInfo">An array of paramters' data type information</param>
            <param name="paramValue">An array of paramters' value</param>
            <returns>The quantity of rows affected.</returns>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.ExecuteNonQuery(System.String,Magic.Framework.Data.StdParameter[])">
            <summary>
            <para>Execute the SQL Query and return  the quantity of rows affected</para>
            </summary>
            <param name="sql">SQL text</param>
            <param name="stdParameters">An array of <see cref="T:Magic.Framework.Data.StdParameter"/> that contains the parameter list</param>
            <returns>The quantity of rows affected.</returns>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.ExecuteNonQueryForProc(System.String)">
            <summary>
            <para>Execute the Stored Procedure and return  the quantity of rows affected</para>
            </summary>
            <param name="storedProcedureName">Stored procedure name.</param>
            <returns>The quantity of rows affected.</returns>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.ExecuteNonQueryForProc(System.String,System.Object[])">
            <summary>
            <para>Execute the Stored Procedure and return  the quantity of rows affected</para>
            </summary>
            <param name="storedProcedureName">Stored procedure name.</param>
            <param name="parameterValues">
            <para>An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>The quantity of rows affected.</returns>
        </member>
        <member name="M:Magic.Framework.Data.DbSession.ExecuteReader(System.Data.IDbCommand,System.Int32)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to be executed</param>
            <param name="commandTimeout">The time in seconds to wait for the command to execute. The default is 30 seconds.</param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>    
        </member>
        <member name="M:Magic.Framework.Data.DbSession.ExecuteReader(System.Data.IDbCommand)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to be executed</param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>    
        </member>
        <member name="M:Magic.Framework.Data.DbSession.ExecuteReader(System.String)">
            <summary>
            <para>Executes the SQL text and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="sql">SQL text</param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>    
        </member>
        <member name="M:Magic.Framework.Data.DbSession.ExecuteReader(System.String,System.String[],Magic.Framework.Data.DbTypeInfo[],System.Object[])">
            <summary>
            <para>Executes the SQL Query and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="sql">SQL text</param>
            <param name="paramName">An array of paramters' name</param>
            <param name="paramInfo">An array of paramters' data type information</param>
            <param name="paramValue">An array of paramters' value</param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>    
        </member>
        <member name="M:Magic.Framework.Data.DbSession.ExecuteReader(System.String,Magic.Framework.Data.StdParameter[])">
            <summary>
            <para>Executes the SQL Query and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="sql">SQL text</param>
            <param name="stdParameters">An array of <see cref="T:Magic.Framework.Data.StdParameter"/> that contains the parameter list</param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>    
        </member>
        <member name="M:Magic.Framework.Data.DbSession.ExecuteReaderForProc(System.String)">
            <summary>
            <para>Executes the Stored Procedure and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="storedProcedureName">Stored procedure name.</param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>    
        </member>
        <member name="M:Magic.Framework.Data.DbSession.ExecuteReaderForProc(System.String,System.Object[])">
            <summary>
            <para>Executes the Stored Procedure and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="storedProcedureName">Stored procedure name.</param>
            <param name="parameterValues">
            <para>An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>    
        </member>
        <member name="P:Magic.Framework.Data.DbSession.SequenceType">
            <summary>
            <para>The sequence type</para>
            <para>SequenceType.SelectBeforeInsert: such as Oracle sequence. </para>
            <para>SequenceType.SelectBeforeInsert: such as identities in SQL Server and MySql. </para>
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.Configuration.Manageability.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.Manageability.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.Manageability.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.Manageability.Properties.Resources.ConnectionStringConnectionStringPartName">
            <summary>
              Looks up a localized string similar to Connection string.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.Manageability.Properties.Resources.ConnectionStringPolicyNameTemplate">
            <summary>
              Looks up a localized string similar to Specify settings for connection &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.Manageability.Properties.Resources.ConnectionStringProviderNamePartName">
            <summary>
              Looks up a localized string similar to Provider name.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.Manageability.Properties.Resources.ConnectionStringsCategoryName">
            <summary>
              Looks up a localized string similar to Connection strings.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.Manageability.Properties.Resources.DatabaseCategoryName">
            <summary>
              Looks up a localized string similar to Database.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.Manageability.Properties.Resources.DatabaseSettingsDefaultDatabasePartName">
            <summary>
              Looks up a localized string similar to Default database.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.Manageability.Properties.Resources.DatabaseSettingsPolicyName">
            <summary>
              Looks up a localized string similar to Specify Database Block Settings.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.Manageability.Properties.Resources.OracleConnectionPackagesPartName">
            <summary>
              Looks up a localized string similar to Package mappings.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.Manageability.Properties.Resources.OracleConnectionPolicyNameTemplate">
            <summary>
              Looks up a localized string similar to Specify settings for oracle connection &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.Manageability.Properties.Resources.OracleConnectionsCategoryName">
            <summary>
              Looks up a localized string similar to Oracle packages.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.Manageability.Properties.Resources.ProviderMappingDatabaseTypePartName">
            <summary>
              Looks up a localized string similar to Database type.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.Manageability.Properties.Resources.ProviderMappingPolicyNameTemplate">
            <summary>
              Looks up a localized string similar to Specify settings for provider &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.Manageability.Properties.Resources.ProviderMappingsCategoryName">
            <summary>
              Looks up a localized string similar to Provider mappings.
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.TypeConvert.UInt16Convert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.UInt16Convert.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="customDbTypeValue"></param>
        </member>
        <member name="T:Magic.Framework.Data.TypeConvert.DateConvert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.DateConvert.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="customDbTypeValue"></param>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.DateConvert.GetValue(System.Data.IDataReader,System.Int32,System.Type)">
            <summary>
            <para>Get the value from <see cref="T:System.Data.IDataReader"/>, convert it to <paramref name="returnType"/></para>
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> that contains the data to be read.</param>
            <param name="index">The index of the field in <paramref name="IDataReader"/> that to be read.</param>
            <param name="returnType">The <see cref="T:System.Type"/> of the return value.</param>
            <returns>The value boxed with specific type.</returns>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.DateConvert.SetValue(System.Data.Common.DbParameter,Magic.Framework.Data.DbTypeInfo,System.Object)">
            <summary>
            Set the value to <see cref="T:System.Data.Common.DbParameter"/>
            </summary>
            <param name="parameter"></param>
            <param name="typeInfo"></param>
            <param name="value"></param>
        </member>
        <member name="T:Magic.Framework.Data.TypeConvert.AnsiStringConvert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.AnsiStringConvert.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="customDbTypeValue"></param>
        </member>
        <member name="T:Magic.Framework.Data.GlobalConfig">
            <summary>
            
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.GlobalConfig.ShowSql">
            <summary>
            
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.GlobalConfig.DebugInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.TypeConvert.UInt64Convert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.UInt64Convert.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="customDbTypeValue"></param>
        </member>
        <member name="T:Magic.Framework.Data.TypeConvert.DateTimeConvert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.DateTimeConvert.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="customDbTypeValue"></param>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.DateTimeConvert.GetValue(System.Data.IDataReader,System.Int32,System.Type)">
            <summary>
            <para>Get the value from <see cref="T:System.Data.IDataReader"/>, convert it to <paramref name="returnType"/></para>
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> that contains the data to be read.</param>
            <param name="index">The index of the field in <paramref name="IDataReader"/> that to be read.</param>
            <param name="returnType">The <see cref="T:System.Type"/> of the return value.</param>
            <returns>The value boxed with specific type.</returns>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.DateTimeConvert.SetValue(System.Data.Common.DbParameter,Magic.Framework.Data.DbTypeInfo,System.Object)">
            <summary>
            Set the value to <see cref="T:System.Data.Common.DbParameter"/>
            </summary>
            <param name="parameter"></param>
            <param name="typeInfo"></param>
            <param name="value"></param>
        </member>
        <member name="T:Magic.Framework.Data.Oracle.OracleDatabase">
            <summary>
            <para>Represents an Oracle database.</para>
            </summary>
            <remarks> 
            <para>
            Internally uses Oracle .NET Managed Provider from Microsoft (<see cref="N:System.Data.OracleClient"/>) to connect to a Oracle 9i database.
            </para>  
            <para>
            When retrieving a result set, it will build the package name. The package name should be set based
            on the stored procedure prefix and this should be set via configuration. For 
            example, a package name should be set as prefix of "ENTLIB_" and package name of
            "pkgENTLIB_ARCHITECTURE". For your applications, this is required only if you are defining your stored procedures returning 
            ref cursors.
            </para>
            <para>
            The Oracle database not considered well so far, it should be done later
            </para>
            </remarks>
        </member>
        <member name="M:Magic.Framework.Data.Oracle.OracleDatabase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Magic.Framework.Data.Oracle.OracleDatabase"/> class with a connection string and a list of Oracle packages.
            </summary>
            <param name="connectionString">The connection string for the database.</param>
        </member>
        <member name="M:Magic.Framework.Data.Oracle.OracleDatabase.DoExecuteReader(System.Data.IDbCommand)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to be executed</param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>   
        </member>
        <member name="M:Magic.Framework.Data.Oracle.OracleDatabase.DeriveParameters(System.Data.IDbCommand)">
            <summary>
            Retrieves parameter information from the stored procedure specified in the <see cref="T:System.Data.Common.DbCommand"/> and populates the Parameters collection of the specified <see cref="T:System.Data.Common.DbCommand"/> object. 
            </summary>
            <param name="discoveryCommand">The <see cref="T:System.Data.Common.DbCommand"/> to do the discovery.</param>
            <remarks>
            The <see cref="T:System.Data.Common.DbCommand"/> must be an instance of a <see cref="T:System.Data.OracleClient.OracleCommand"/> object.
            </remarks>
        </member>
        <member name="T:Magic.Framework.Data.DatabaseFactory">
            <summary>
            Contains factory methods for creating Database objects.
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.DatabaseFactory.CreateDatabase">
            <summary>
            Method for invoking a default Database object. Reads default settings
            from the ConnectionSettings.config file.
            </summary>
            <example>
            <code>
            Database dbSvc = DatabaseFactory.CreateDatabase();
            </code>
            </example>
            <returns>Database</returns>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para>An error occured while reading the configuration.</para>
            </exception>
        </member>
        <member name="M:Magic.Framework.Data.DatabaseFactory.CreateDatabase(System.String)">
            <summary>
            Method for invoking a specified Database service object.  Reads service settings
            from the ConnectionSettings.config file.
            </summary>
            <example>
            <code>
            Database dbSvc = DatabaseFactory.CreateDatabase("SQL_Customers");
            </code>
            </example>
            <param name="name">configuration key for database service</param>
            <returns>Database</returns>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para><paramref name="instanceName"/> is not defined in configuration.</para>
            <para>- or -</para>
            <para>An error exists in the configuration.</para>
            <para>- or -</para>
            <para>An error occured while reading the configuration.</para>        
            </exception>
            <exception cref="T:System.Reflection.TargetInvocationException">
            <para>The constructor being called throws an exception.</para>
            </exception>
        </member>
        <member name="T:Magic.Framework.Data.DatabaseCustomFactory">
            <summary>
            This type supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Represents the process to build a <see cref="T:Magic.Framework.Data.Database"/> described by configuration information.
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.DatabaseCustomFactory.GetAssembler(System.Type,System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Returns an <see cref="T:Magic.Framework.Data.Configuration.IDatabaseAssembler"/> that represents the building process for a a concrete <see cref="T:Magic.Framework.Data.Database"/>.
            </summary>
            <param name="type">The concrete <see cref="T:Magic.Framework.Data.Database"/> type.</param>
            <param name="name">The name of the instance to build, or <see langword="null"/> (<b>Nothing</b> in Visual Basic).</param>
            <param name="reflectionCache">The cache to use retrieving reflection information.</param>
            <returns>The <see cref="T:Magic.Framework.Data.Configuration.IDatabaseAssembler"/> instance.</returns>
            <exception cref="T:System.InvalidOperationException">when concrete <see cref="T:Magic.Framework.Data.Database"/> type does have the required <see cref="T:Magic.Framework.Data.Configuration.DatabaseAssemblerAttribute"/>.</exception>
        </member>
        <member name="M:Magic.Framework.Data.DatabaseCustomFactory.CreateObject(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Returns a new instance of a concrete <see cref="T:Magic.Framework.Data.Database"/>, described by the <see cref="T:System.Configuration.ConnectionStringSettings"/> 
            found in the <paramref name="configurationSource"/> under the name <paramref name="name"/>, plus any additional
            configuration information that might describe the the concrete <b>Database</b>.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder.IBuilderContext"/> that represents the current building process.</param>
            <param name="name">The name of the instance to build, or <see langword="null"/> (<b>Nothing</b> in Visual Basic).</param>
            <param name="configurationSource">The source for configuration objects.</param>
            <param name="reflectionCache">The cache to use retrieving reflection information.</param>
            <returns>A new instance of the appropriate subtype of <typeparamref name="Tobject"/>.</returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">when the configuration is invalid or <paramref name="name"/> cannot be found.</exception>
        </member>
        <member name="T:Magic.Framework.Data.DatabaseProviderFactory">
            <summary>
            <para>Represents a factory for creating named instances of <see cref="T:Magic.Framework.Data.Database"/> objects.</para>
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.DatabaseProviderFactory.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Magic.Framework.Data.DatabaseProviderFactory"/> class 
            with the default configuration source.</para>
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.DatabaseProviderFactory.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Magic.Framework.Data.DatabaseProviderFactory"/> class 
            with the given configuration source.</para>
            </summary>
            <param name="configurationSource">The source for configuration information.</param>
        </member>
        <member name="T:Magic.Framework.Data.Configuration.Manageability.OracleConnectionSetting">
            <summary>
            Represents the configuration information for an Oracle database connection defined by the Oracle
            specific connection information configuration section.
            </summary>
            <remarks>
            The collection of <see cref="T:Magic.Framework.Data.Oracle.Configuration.OraclePackageData"/> instances
            defined by an instance of <see cref="T:Magic.Framework.Data.Oracle.Configuration.OracleConnectionData"/>
            is represented as a <see cref="T:System.String"/> array contaning key/value pairs.
            </remarks>
            <seealso cref="T:Magic.Framework.Data.Oracle.Configuration.OracleConnectionSettings"/>
            <seealso cref="T:Magic.Framework.Data.Oracle.Configuration.OracleConnectionData"/>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.Manageability.OracleConnectionSetting.Packages">
            <summary>
            Gets the package mapping information specified by the represented Oracle connection data object as a
            <see cref="T:System.String"/> array of key/value pairs.
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.Configuration.Manageability.ConnectionStringSetting">
            <summary>
            Represents the configuration information for an database connection defined by the connection 
            strings configuration section.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.Manageability.ConnectionStringSetting.ConnectionString">
            <summary>
            Gets the connection string for the represented <see cref="T:System.Configuration.ConnectionStringSettings"/> instance.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.Manageability.ConnectionStringSetting.ProviderName">
            <summary>
            Gets the provider name for the represented <see cref="T:System.Configuration.ConnectionStringSettings"/> instance.
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.TypeConvert.UByteConvert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.UByteConvert.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="customDbTypeValue"></param>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.UByteConvert.GetValue(System.Data.IDataReader,System.Int32,System.Type)">
            <summary>
            <para>Get the value from <see cref="T:System.Data.IDataReader"/>, convert it to <paramref name="returnType"/></para>
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> that contains the data to be read.</param>
            <param name="index">The index of the field in <paramref name="IDataReader"/> that to be read.</param>
            <param name="returnType">The <see cref="T:System.Type"/> of the return value.</param>
            <returns>The value boxed with specific type.</returns>
        </member>
        <member name="M:Magic.Framework.Data.TypeConvert.UByteConvert.SetValue(System.Data.Common.DbParameter,Magic.Framework.Data.DbTypeInfo,System.Object)">
            <summary>
            Set the value to <see cref="T:System.Data.Common.DbParameter"/>
            </summary>
            <param name="parameter"></param>
            <param name="typeInfo"></param>
            <param name="value"></param>
        </member>
        <member name="T:Magic.Framework.Data.Instrumentation.DataInstrumentationListener">
            <summary>
            Provides the concrete instrumentation for the logical events raised by a <see cref="T:Magic.Framework.Data.Instrumentation.DataInstrumentationProvider"/> object.
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Instrumentation.DataInstrumentationListener.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Magic.Framework.Data.Instrumentation.DataInstrumentationListener"/> class.
            </summary>
            <param name="instanceName">The name of the <see cref="T:Magic.Framework.Data.Database"/> instance this instrumentation listener is created for.</param>
            <param name="performanceCountersEnabled"><b>true</b> if performance counters should be updated.</param>
            <param name="eventLoggingEnabled"><b>true</b> if event log entries should be written.</param>
            <param name="wmiEnabled"><b>true</b> if WMI events should be fired.</param>
        </member>
        <member name="M:Magic.Framework.Data.Instrumentation.DataInstrumentationListener.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:Magic.Framework.Data.Instrumentation.DataInstrumentationListener"/> class.
            </summary>
            <param name="instanceName">The name of the <see cref="T:Magic.Framework.Data.Database"/> instance this instrumentation listener is created for.</param>
            <param name="performanceCountersEnabled"><b>true</b> if performance counters should be updated.</param>
            <param name="eventLoggingEnabled"><b>true</b> if event log entries should be written.</param>
            <param name="wmiEnabled"><b>true</b> if WMI events should be fired.</param>
            <param name="nameFormatter">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter"/> that is used to creates unique name for each <see cref="T:System.Diagnostics.PerformanceCounter"/> instance.</param>
        </member>
        <member name="M:Magic.Framework.Data.Instrumentation.DataInstrumentationListener.ConnectionOpened(System.Object,System.EventArgs)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Default handler for the <see cref="E:Magic.Framework.Data.Instrumentation.DataInstrumentationProvider.connectionOpened"/> event.
            </summary>
            <remarks>
            Increments the "Connections Opened/sec" performance counter.
            </remarks>
            <param name="sender">Sender of the event.</param>
            <param name="e">Data for the event.</param>
        </member>
        <member name="M:Magic.Framework.Data.Instrumentation.DataInstrumentationListener.CommandExecuted(System.Object,Magic.Framework.Data.Instrumentation.CommandExecutedEventArgs)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Default handler for the <see cref="E:Magic.Framework.Data.Instrumentation.DataInstrumentationProvider.commandExecuted"/> event.
            </summary>
            <remarks>
            Increments the "Commands Executed/sec" performance counter.
            </remarks>
            <param name="sender">Sender of the event.</param>
            <param name="e">Data for the event.</param>
        </member>
        <member name="M:Magic.Framework.Data.Instrumentation.DataInstrumentationListener.ConnectionFailed(System.Object,Magic.Framework.Data.Instrumentation.ConnectionFailedEventArgs)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Default handler for the <see cref="E:Magic.Framework.Data.Instrumentation.DataInstrumentationProvider.connectionFailed"/> event.
            </summary>
            <remarks>
            Increments the "Connections Failed/sec" performance counter, fires the ConnectionFailedEvent WMI event and writes 
            an error entry to the event log.
            </remarks>
            <param name="sender">Sender of the event.</param>
            <param name="e">Data for the event.</param>
        </member>
        <member name="M:Magic.Framework.Data.Instrumentation.DataInstrumentationListener.CommandFailed(System.Object,Magic.Framework.Data.Instrumentation.CommandFailedEventArgs)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Default handler for the <see cref="E:Magic.Framework.Data.Instrumentation.DataInstrumentationProvider.commandFailed"/> event.
            </summary>
            <remarks>
            Increments the "Commands Failed/sec" performance counter, fires the CommandFailedEvent WMI event and writes 
            an error entry to the event log.
            </remarks>
            <param name="sender">Sender of the event.</param>
            <param name="e">Data for the event.</param>
        </member>
        <member name="M:Magic.Framework.Data.Instrumentation.DataInstrumentationListener.ClearCounterCache">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Clears the cached performance counter instances.
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Instrumentation.DataInstrumentationListener.CreatePerformanceCounters(System.String[])">
            <summary>
            Creates the performance counters to instrument the caching events for the specified instance names.
            </summary>
            <param name="instanceNames">The instance names for the performance counters.</param>
        </member>
        <member name="T:Magic.Framework.Data.Instrumentation.ConnectionFailedEventArgs">
            <summary>
            Provides data for the <see cref="E:Magic.Framework.Data.Instrumentation.DataInstrumentationProvider.connectionFailed"/> event.
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Instrumentation.ConnectionFailedEventArgs.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Magic.Framework.Data.Instrumentation.ConnectionFailedEventArgs"/> class.
            </summary>
            <param name="connectionString">The connection string that caused the failed connection, with credentials removed.</param>
            <param name="exception">The exception thrown when the connection failed.</param>
        </member>
        <member name="P:Magic.Framework.Data.Instrumentation.ConnectionFailedEventArgs.ConnectionString">
            <summary>
            Gets the connection string that caused the failed connection, with credentials removed.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Instrumentation.ConnectionFailedEventArgs.Exception">
            <summary>
            Gets the exception thrown when the connection failed.
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.Instrumentation.CommandFailedEventArgs">
            <summary>
            Provides data for the <see cref="E:Magic.Framework.Data.Instrumentation.DataInstrumentationProvider.commandFailed"/> event.
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Instrumentation.CommandFailedEventArgs.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Magic.Framework.Data.Instrumentation.CommandFailedEventArgs"/> class.
            </summary>
            <param name="commandText">The text of the command that failed its execution.</param>
            <param name="connectionString">The connection string of the <see cref="T:Magic.Framework.Data.Database"/> that executed the failed command, with credentials removed.</param>
            <param name="exception">The exception thrown when the command failed.</param>
        </member>
        <member name="P:Magic.Framework.Data.Instrumentation.CommandFailedEventArgs.CommandText">
            <summary>
            Gets the text of the command that failed its execution.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Instrumentation.CommandFailedEventArgs.ConnectionString">
            <summary>
            Gets the connection string of the <see cref="T:Magic.Framework.Data.Database"/> that executed the failed command, with credentials removed.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Instrumentation.CommandFailedEventArgs.Exception">
            <summary>
            Gets the exception thrown when the command failed.
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.DbTypeInfo">
            <summary>
            This is the base class that adds information to the <see cref="T:System.Data.DbType"/> 
            </summary>
            <remarks>
            <p>
            we uses the DbTypeInfo to get enough
            information to create an <see cref="T:System.Data.IDbDataParameter"/>.  
            </p>
            <p>
            use the DbTypeInfo to convert the <see cref="P:Magic.Framework.Data.DbTypeInfo.StdDbType"/>
            to the appropriate sql type for SchemaExport.
            </p>
            </remarks>
        </member>
        <member name="M:Magic.Framework.Data.DbTypeInfo.DefaultMappedClrType(Magic.Framework.Data.StdDbType)">
            <summary>
            
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbTypeInfo.DefaultMappedStdDbType(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbTypeInfo.Bool">
            <summary>
            boolean type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbTypeInfo.UByte">
            <summary>
            8 bit unsigned integer value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbTypeInfo.Byte">
            <summary>
            8 bit signed integer value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbTypeInfo.UInt16">
            <summary>
            16 bit unsigned integer value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbTypeInfo.UInt32">
            <summary>
            32 bit unsigned integer value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbTypeInfo.UInt64">
            <summary>
            64 bit unsigned integer value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbTypeInfo.Int16">
            <summary>
            16 bit signed integer value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbTypeInfo.Int32">
            <summary>
            32 bit signed integer value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbTypeInfo.Int64">
            <summary>
            64 bit signed integer value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbTypeInfo.Number(System.Byte,System.Byte)">
            <summary>
            Oracle number, SQL Server decimal, etc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbTypeInfo.Float">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbTypeInfo.Double">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbTypeInfo.Single">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbTypeInfo.Date">
            <summary>
            date type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbTypeInfo.DateTime">
            <summary>
            date time type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbTypeInfo.AnsiChar(System.Int32)">
            <summary>
            Fixed length
            </summary>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbTypeInfo.UnicodeChar(System.Int32)">
            <summary>
            Fixed length
            </summary>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbTypeInfo.AnsiString(System.Int32)">
            <summary>
            ansi string type, variant length
            </summary>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbTypeInfo.UnicodeString(System.Int32)">
            <summary>
            unicode string type, variant length
            </summary>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbTypeInfo.AnsiClob">
            <summary>
            ansi long text type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbTypeInfo.UnicodeClob">
            <summary>
            unicode long text type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbTypeInfo.Binary(System.Int32)">
            <summary>
            binary data type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbTypeInfo.Create(Magic.Framework.Data.StdDbType,System.Int32,System.Byte,System.Byte)">
            <summary>
            Create a <see cref="T:Magic.Framework.Data.DbTypeInfo"/>.
            </summary>
            <param name="dbType"></param>
            <param name="length"></param>
            <param name="precision"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.DbTypeInfo.GetHashCode">
            <summary></summary>
        </member>
        <member name="M:Magic.Framework.Data.DbTypeInfo.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Magic.Framework.Data.DbTypeInfo.StdDbType">
            <summary></summary>
        </member>
        <member name="P:Magic.Framework.Data.DbTypeInfo.Length">
            <summary></summary>
        </member>
        <member name="P:Magic.Framework.Data.DbTypeInfo.Precision">
            <summary></summary>
        </member>
        <member name="P:Magic.Framework.Data.DbTypeInfo.Scale">
            <summary></summary>
        </member>
        <member name="P:Magic.Framework.Data.DbTypeInfo.LengthDefined">
            <summary></summary>
        </member>
        <member name="P:Magic.Framework.Data.DbTypeInfo.PrecisionDefined">
            <summary></summary>
        </member>
        <member name="P:Magic.Framework.Data.DbTypeInfo.DefaultClrType">
            <summary></summary>
        </member>
        <member name="T:Magic.Framework.Data.Generic.GenericDialect">
            <summary>
            generic purpose dialect
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Generic.GenericDialect.ConfigDbParameter(System.Data.Common.DbParameter,Magic.Framework.Data.DbTypeInfo)">
            <summary>
            use the <paramref name="typeInfo"/> to config the parameter information
            </summary>
            <param name="param"><see cref="T:System.Data.Common.DbParameter"/> that to be configed</param>
            <param name="typeInfo"><see cref="T:Magic.Framework.Data.DbTypeInfo"/> that contains the parameter information</param>
        </member>
        <member name="M:Magic.Framework.Data.Generic.GenericDialect.ConfigDbParameter(System.Data.Common.DbParameter,Magic.Framework.Data.DbTypeInfo,System.Object)">
            <summary>
            use the <paramref name="typeInfo"/> to config the parameter information
            </summary>
            <param name="param"><see cref="T:System.Data.Common.DbParameter"/> that to be configed</param>
            <param name="typeInfo"><see cref="T:Magic.Framework.Data.DbTypeInfo"/> that contains the parameter information</param>
            <param name="value">The value of the parameter</param>
        </member>
        <member name="M:Magic.Framework.Data.Generic.GenericDialect.GetValue(System.Data.IDataReader,System.Int32,System.Type,Magic.Framework.Data.DbTypeInfo)">
            <summary>
            Read the field value from the <paramref name="reader"/>.
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <param name="returnType">The type of the return value.</param>
            <param name="typeInfo"><see cref="T:Magic.Framework.Data.DbTypeInfo"/> that contains the parameter information</param>
            <returns></returns>
        </member>
        <member name="M:Magic.Framework.Data.Generic.GenericDialect.LogParameter(log4net.ILog,System.Data.IDataParameter)">
            <summary>
            Write the <paramref name="param"/> into log file, use the specific database's data type
            </summary>
            <param name="log">The <see cref="T:log4net.ILog"/>.</param>
            <param name="param">The <see cref="T:System.Data.IDataParameter"/> that need to be logged</param>
        </member>
        <member name="M:Magic.Framework.Data.Generic.GenericDialect.GetSequenceValSql(System.String)">
            <summary>
            
            </summary>
            <param name="sequenceName"></param>
            <returns></returns>
        </member>
        <member name="P:Magic.Framework.Data.Generic.GenericDialect.SequenceType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Generic.GenericDialect.UserParametersStartIndex">
            <summary>
            Returns the starting index for parameters in a command.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Generic.GenericDialect.ParameterToken">
            <summary>
            <para>Gets the parameter token used to delimit parameters for the database.</para>
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Generic.GenericDialect.CustomDbParameterType">
            <summary>
            <para>The <see cref="T:System.Type"/> of DbParameter in specific database provider, such as SqlParameter in SqlClient,
            OracleParameter in OracleClient, etc.
            </para>
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Configuration.Manageability.ConnectionStringsManageabilityProvider.OverrideWithGroupPoliciesForConfigurationSection(System.Configuration.ConnectionStringsSection,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationSection"/>'s properties with the Group Policy values from 
            the registry.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="policyKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides.</param>
        </member>
        <member name="M:Magic.Framework.Data.Configuration.Manageability.ConnectionStringsManageabilityProvider.GenerateWmiObjectsForConfigurationSection(System.Configuration.ConnectionStringsSection,System.Collections.Generic.ICollection{Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting})">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting"/> instances that describe the <paramref name="configurationSection"/>.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="wmiSettings">A collection to where the generated WMI objects are to be added.</param>
        </member>
        <member name="M:Magic.Framework.Data.Configuration.Manageability.ConnectionStringsManageabilityProvider.OverrideWithGroupPoliciesAndGenerateWmiObjectsForConfigurationElements(System.Configuration.ConnectionStringsSection,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,System.Boolean,System.Collections.Generic.ICollection{Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting})">
            <summary>
            Overrides the <paramref name="configurationSection"/>'s configuration elements' properties 
            with the Group Policy values from the registry, if any, and creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting"/> 
            instances that describe these configuration elements.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="generateWmiObjects"><see langword="true"/> if WMI objects must be generated; otherwise, 
            <see langword="false"/>.</param>
            <param name="wmiSettings">A collection to where the generated WMI objects are to be added.</param>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.Manageability.ConnectionStringsManageabilityProvider.SectionCategoryName">
            <summary>
            Gets the name of the category that represents the whole configuration section.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.Manageability.ConnectionStringsManageabilityProvider.SectionName">
            <summary>
            Gets the name of the managed configuration section.
            </summary>
        </member>
        <member name="T:Magic.Framework.Data.Sql.SqlDatabaseAssembler">
            <summary>
            Represents the process to build an instance of <see cref="T:Magic.Framework.Data.Sql.SqlDatabase"/> described by configuration information.
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.Sql.SqlDatabaseAssembler.Assemble(System.String,System.Configuration.ConnectionStringSettings,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Builds an instance of <see cref="T:Magic.Framework.Data.Sql.SqlDatabase"/>, based on the provided connection string.
            </summary>
            <param name="name">The name for the new database instance.</param>
            <param name="connectionStringSettings">The connection string for the new database instance.</param>
            <param name="configurationSource">The source for any additional configuration information.</param>
            <returns>The new sql database instance.</returns>
        </member>
        <member name="T:Magic.Framework.Data.ParameterCache">
            <summary>
            <para>
            Provides parameter caching services for dynamic parameter discovery of stored procedures.
            Eliminates the round-trip to the database to derive the parameters and types when a command
            is executed more than once.
            </para>
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.ParameterCache.SetParameters(System.Data.IDbCommand,Magic.Framework.Data.Database)">
            <summary>
            <para>
            Populates the parameter collection for a command wrapper from the cache 
            or performs a round-trip to the database to query the parameters.
            </para>
            </summary>
            <param name="command">
            <para>The command to add the parameters.</para>
            </param>
            <param name="database">
            <para>The database to use to set the parameters.</para>
            </param>
        </member>
        <member name="M:Magic.Framework.Data.ParameterCache.Clear">
            <summary>
            <para>Empties the parameter cache.</para>
            </summary>
        </member>
        <member name="M:Magic.Framework.Data.ParameterCache.AddParametersFromCache(System.Data.IDbCommand,Magic.Framework.Data.Database)">
            <summary>
            <para>Adds parameters to a command using the cache.</para>
            </summary>
            <param name="command">
            <para>The command to add the parameters.</para>
            </param>
            <param name="database">The database to use.</param>
        </member>
        <member name="M:Magic.Framework.Data.ParameterCache.AlreadyCached(System.Data.IDbCommand,Magic.Framework.Data.Database)">
            <summary>
            <para>Checks to see if a cache entry exists for a specific command on a specific connection</para>
            </summary>
            <param name="command">
            <para>The command to check.</para>
            </param>
            <param name="database">The database to check.</param>
            <returns>True if the parameters are already cached for the provided command, false otherwise</returns>
        </member>
        <member name="M:Magic.Framework.Data.Configuration.Manageability.OracleConnectionSettingsManageabilityProvider.OverrideWithGroupPoliciesForConfigurationSection(Magic.Framework.Data.Oracle.Configuration.OracleConnectionSettings,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationSection"/>'s properties with the Group Policy values from 
            the registry.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="policyKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides.</param>
        </member>
        <member name="M:Magic.Framework.Data.Configuration.Manageability.OracleConnectionSettingsManageabilityProvider.GenerateWmiObjectsForConfigurationSection(Magic.Framework.Data.Oracle.Configuration.OracleConnectionSettings,System.Collections.Generic.ICollection{Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting})">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting"/> instances that describe the <paramref name="configurationSection"/>.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="wmiSettings">A collection to where the generated WMI objects are to be added.</param>
        </member>
        <member name="M:Magic.Framework.Data.Configuration.Manageability.OracleConnectionSettingsManageabilityProvider.OverrideWithGroupPoliciesAndGenerateWmiObjectsForConfigurationElements(Magic.Framework.Data.Oracle.Configuration.OracleConnectionSettings,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,System.Boolean,System.Collections.Generic.ICollection{Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting})">
            <summary>
            Overrides the <paramref name="configurationSection"/>'s configuration elements' properties 
            with the Group Policy values from the registry, if any, and creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSetting"/> 
            instances that describe these configuration elements.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="generateWmiObjects"><see langword="true"/> if WMI objects must be generated; otherwise, 
            <see langword="false"/>.</param>
            <param name="wmiSettings">A collection to where the generated WMI objects are to be added.</param>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.Manageability.OracleConnectionSettingsManageabilityProvider.SectionCategoryName">
            <summary>
            Gets the name of the category that represents the whole configuration section.
            </summary>
        </member>
        <member name="P:Magic.Framework.Data.Configuration.Manageability.OracleConnectionSettingsManageabilityProvider.SectionName">
            <summary>
            Gets the name of the managed configuration section.
            </summary>
        </member>
    </members>
</doc>
